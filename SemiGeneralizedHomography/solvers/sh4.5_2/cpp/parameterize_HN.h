#pragma once

#include <Eigen/Eigen>

#include <iostream>
using namespace Eigen;
namespace sh45_2
{
    inline Eigen::Matrix<double, 5, 21> get_coeffs(const Eigen::Matrix<double, 3, 5>& qTemp,
            const Eigen::Matrix<double, 3, 5>& pTemp, const Eigen::Matrix<double, 3, 5>& cTemp,
            Eigen::Matrix<double, 7, 3>& nullSpace)
    {
        double q[3][5], p[3][5], c[3][5];
        for(int i=0;i<3;i++) {
            for(int j=0; j<5; j++) {
                q[i][j] = qTemp(i,j);
                p[i][j] = pTemp(i,j);
                c[i][j] = cTemp(i,j);
            }
        }
        
        double ATemp[7][7], bTemp[7][3];
        ATemp[0][0] = 0;
        ATemp[0][1] = -p[2][1] * q[0][1];
        ATemp[0][2] = 0;
        ATemp[0][3] = -p[2][1] * q[1][1];
        ATemp[0][4] = p[1][1] * q[0][1];
        ATemp[0][5] = p[1][1] * q[1][1];
        ATemp[0][6] = c[0][1] * q[0][1];
        ATemp[1][0] = p[2][1] * q[0][1];
        ATemp[1][1] = 0;
        ATemp[1][2] = p[2][1] * q[1][1];
        ATemp[1][3] = 0;
        ATemp[1][4] = -p[0][1] * q[0][1];
        ATemp[1][5] = -p[0][1] * q[1][1];
        ATemp[1][6] = c[1][1] * q[0][1];
        ATemp[2][0] = 0;
        ATemp[2][1] = -p[2][2] * q[0][2];
        ATemp[2][2] = 0;
        ATemp[2][3] = -p[2][2] * q[1][2];
        ATemp[2][4] = p[1][2] * q[0][2];
        ATemp[2][5] = p[1][2] * q[1][2];
        ATemp[2][6] = c[0][2] * q[0][2];
        ATemp[3][0] = p[2][2] * q[0][2];
        ATemp[3][1] = 0;
        ATemp[3][2] = p[2][2] * q[1][2];
        ATemp[3][3] = 0;
        ATemp[3][4] = -p[0][2] * q[0][2];
        ATemp[3][5] = -p[0][2] * q[1][2];
        ATemp[3][6] = c[1][2] * q[0][2];
        ATemp[4][0] = 0;
        ATemp[4][1] = -p[2][3] * q[0][3];
        ATemp[4][2] = 0;
        ATemp[4][3] = -p[2][3] * q[1][3];
        ATemp[4][4] = p[1][3] * q[0][3];
        ATemp[4][5] = p[1][3] * q[1][3];
        ATemp[4][6] = c[0][3] * q[0][3];
        ATemp[5][0] = p[2][3] * q[0][3];
        ATemp[5][1] = 0;
        ATemp[5][2] = p[2][3] * q[1][3];
        ATemp[5][3] = 0;
        ATemp[5][4] = -p[0][3] * q[0][3];
        ATemp[5][5] = -p[0][3] * q[1][3];
        ATemp[5][6] = c[1][3] * q[0][3];
        ATemp[6][0] = 0;
        ATemp[6][1] = -p[2][4] * q[0][4];
        ATemp[6][2] = 0;
        ATemp[6][3] = -p[2][4] * q[1][4];
        ATemp[6][4] = p[1][4] * q[0][4];
        ATemp[6][5] = p[1][4] * q[1][4];
        ATemp[6][6] = c[0][4] * q[0][4];
        
        bTemp[0][0] = -c[0][1] * q[1][1];
        bTemp[0][1] = -c[0][1] * q[2][1];
        bTemp[0][2] = -p[1][1] * q[2][1];
        bTemp[1][0] = -c[1][1] * q[1][1];
        bTemp[1][1] = -c[1][1] * q[2][1];
        bTemp[1][2] = p[0][1] * q[2][1];
        bTemp[2][0] = -c[0][2] * q[1][2];
        bTemp[2][1] = -c[0][2] * q[2][2];
        bTemp[2][2] = -p[1][2] * q[2][2];
        bTemp[3][0] = -c[1][2] * q[1][2];
        bTemp[3][1] = -c[1][2] * q[2][2];
        bTemp[3][2] = p[0][2] * q[2][2];
        bTemp[4][0] = -c[0][3] * q[1][3];
        bTemp[4][1] = -c[0][3] * q[2][3];
        bTemp[4][2] = -p[1][3] * q[2][3];
        bTemp[5][0] = -c[1][3] * q[1][3];
        bTemp[5][1] = -c[1][3] * q[2][3];
        bTemp[5][2] = p[0][3] * q[2][3];
        bTemp[6][0] = -c[0][4] * q[1][4];
        bTemp[6][1] = -c[0][4] * q[2][4];
        bTemp[6][2] = -p[1][4] * q[2][4];
        
        
        MatrixXd A(7,7), b(7,3);
        
        for(int i=0;i<7;i++) {
            for(int j=0; j<7; j++) {
                A(i,j) = ATemp[i][j];
            }
        }
        
        for(int i=0;i<7;i++) {
            for(int j=0; j<3; j++) {
                b(i,j) = bTemp[i][j];
            }
        }
        
        
        Eigen::Matrix<double, 7, 3> data_eigen = A.lu   ().solve(b); //  or http://eigen.tuxfamily.org/dox/group__TutorialLinearAlgebra.html
        double data2[5][21], data[7][3];
        for(int i=0;i<7;i++) {
            for(int j=0; j<3; j++) {
                data[i][j] = data_eigen(i,j);
                nullSpace(i,j) = data_eigen(i,j);
            }
        }
        
        data2[0][0] = 0;
        data2[0][1] = (double) (data[2][0] * data[2][0] * data[6][0]) + (double) (data[3][0] * data[3][0] * data[6][0]) + (double) (data[5][0] * data[5][0] * data[6][0]) - (double) (data[2][0] * data[0][0]) - (double) (data[3][0] * data[1][0]) - (double) (data[4][0] * data[5][0]);
        data2[0][2] = data[2][0] * data[2][0] * data[6][1] + 2 * data[2][0] * data[2][1] * data[6][0] + data[3][0] * data[3][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][0] + data[5][0] * data[5][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][0] - data[2][1] * data[0][0] - data[2][0] * data[0][1] - data[3][1] * data[1][0] - data[3][0] * data[1][1] - data[4][0] * data[5][1] - data[4][1] * data[5][0];
        data2[0][3] = 2 * data[2][0] * data[2][1] * data[6][1] + data[2][1] * data[2][1] * data[6][0] + 2 * data[3][0] * data[3][1] * data[6][1] + data[3][1] * data[3][1] * data[6][0] + 2 * data[5][0] * data[5][1] * data[6][1] + data[5][1] * data[5][1] * data[6][0] - data[2][0] * data[0][0] - data[0][1] * data[2][1] - data[3][0] * data[1][0] - data[1][1] * data[3][1] - data[4][0] * data[5][0] - data[4][1] * data[5][1];
        data2[0][4] = data[2][1] * data[2][1] * data[6][1] + data[3][1] * data[3][1] * data[6][1] + data[5][1] * data[5][1] * data[6][1] - data[2][1] * data[0][0] - data[2][0] * data[0][1] - data[3][1] * data[1][0] - data[3][0] * data[1][1] - data[4][0] * data[5][1] - data[4][1] * data[5][0];
        data2[0][5] = -data[0][1] * data[2][1] - data[1][1] * data[3][1] - data[4][1] * data[5][1];
        data2[0][6] = -data[5][0] * data[6][0] + data[4][0];
        data2[0][7] = data[2][0] * data[2][0] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][0] + data[3][0] * data[3][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][0] + data[5][0] * data[5][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][0] - data[2][2] * data[0][0] - data[2][0] * data[0][2] - data[3][2] * data[1][0] - data[3][0] * data[1][2] - data[4][0] * data[5][2] - data[4][2] * data[5][0] - data[5][0] * data[6][1] - data[5][1] * data[6][0] + data[4][1];
        data2[0][8] = 2 * data[2][0] * data[2][1] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][1] + 2 * data[2][1] * data[2][2] * data[6][0] + 2 * data[3][0] * data[3][1] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][0] + 2 * data[5][0] * data[5][1] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][0] - data[2][2] * data[0][1] - data[2][1] * data[0][2] - data[3][2] * data[1][1] - data[3][1] * data[1][2] - data[4][1] * data[5][2] - data[4][2] * data[5][1] + data[5][0] * data[6][0] - data[5][1] * data[6][1] + data[4][0];
        data2[0][9] = data[2][1] * data[2][1] * data[6][2] + 2 * data[2][1] * data[2][2] * data[6][1] + data[3][1] * data[3][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][1] + data[5][1] * data[5][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][1] - data[2][2] * data[0][0] - data[2][0] * data[0][2] - data[3][2] * data[1][0] - data[3][0] * data[1][2] - data[4][0] * data[5][2] - data[4][2] * data[5][0] + data[5][0] * data[6][1] + data[5][1] * data[6][0] + data[4][1];
        data2[0][10] = -data[2][2] * data[0][1] - data[2][1] * data[0][2] - data[3][2] * data[1][1] - data[3][1] * data[1][2] - data[4][1] * data[5][2] - data[4][2] * data[5][1] + data[5][1] * data[6][1];
        data2[0][11] = -data[5][0] * data[6][2] - data[5][2] * data[6][0] + data[4][2];
        data2[0][12] = 2 * data[2][0] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][0] + 2 * data[3][0] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][0] + 2 * data[5][0] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][0] - data[2][2] * data[0][2] - data[3][2] * data[1][2] - data[4][2] * data[5][2] - data[5][1] * data[6][2] - data[5][2] * data[6][1] - data[6][0];
        data2[0][13] = 2 * data[2][1] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][1] + data[5][0] * data[6][2] + data[5][2] * data[6][0] + data[4][2] - data[6][1];
        data2[0][14] = -data[2][2] * data[0][2] - data[3][2] * data[1][2] - data[4][2] * data[5][2] + data[5][1] * data[6][2] + data[5][2] * data[6][1];
        data2[0][15] = -data[5][2] * data[6][2];
        data2[0][16] = data[2][2] * data[2][2] * data[6][2] + data[3][2] * data[3][2] * data[6][2] + data[5][2] * data[5][2] * data[6][2] - data[6][2];
        data2[0][17] = data[5][2] * data[6][2];
        data2[0][18] = 0;
        data2[0][19] = 0;
        data2[0][20] = 0;
        data2[1][0] = 0;
        data2[1][1] = data[2][0] * data[2][0] * data[6][0] * data[6][0] + data[3][0] * data[3][0] * data[6][0] * data[6][0] + data[5][0] * data[5][0] * data[6][0] * data[6][0] - data[0][0] * data[0][0] - data[1][0] * data[1][0] - data[4][0] * data[4][0];
        data2[1][2] = 2 * data[2][0] * data[2][0] * data[6][0] * data[6][1] + 2 * data[2][0] * data[2][1] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][0] * data[6][0] - 2 * data[0][1] * data[0][0] - 2 * data[1][1] * data[1][0] - 2 * data[4][1] * data[4][0];
        data2[1][3] = data[2][0] * data[2][0] * data[6][1] * data[6][1] + 4 * data[2][0] * data[2][1] * data[6][0] * data[6][1] + data[2][1] * data[2][1] * data[6][0] * data[6][0] + data[3][0] * data[3][0] * data[6][1] * data[6][1] + 4 * data[3][0] * data[3][1] * data[6][0] * data[6][1] + data[3][1] * data[3][1] * data[6][0] * data[6][0] + data[5][0] * data[5][0] * data[6][1] * data[6][1] + 4 * data[5][0] * data[5][1] * data[6][0] * data[6][1] + data[5][1] * data[5][1] * data[6][0] * data[6][0] - data[0][0] * data[0][0] - data[0][1] * data[0][1] - data[1][0] * data[1][0] - data[1][1] * data[1][1] + data[2][0] * data[2][0] + data[3][0] * data[3][0] - data[4][0] * data[4][0] - data[4][1] * data[4][1] + data[5][0] * data[5][0];
        data2[1][4] = 2 * data[2][0] * data[2][1] * data[6][1] * data[6][1] + 2 * data[2][1] * data[2][1] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][0] * data[6][1] - 2 * data[0][1] * data[0][0] - 2 * data[1][1] * data[1][0] + 2 * data[2][0] * data[2][1] + 2 * data[3][0] * data[3][1] - 2 * data[4][1] * data[4][0] + 2 * data[5][0] * data[5][1];
        data2[1][5] = data[2][1] * data[2][1] * data[6][1] * data[6][1] + data[3][1] * data[3][1] * data[6][1] * data[6][1] + data[5][1] * data[5][1] * data[6][1] * data[6][1] - data[0][1] * data[0][1] - data[1][1] * data[1][1] + data[2][1] * data[2][1] + data[3][1] * data[3][1] - data[4][1] * data[4][1] + data[5][1] * data[5][1];
        data2[1][6] = -2 * data[5][0] * data[6][0] * data[6][0] + 2 * data[4][0] * data[6][0];
        data2[1][7] = 2 * data[2][0] * data[2][0] * data[6][0] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][0] * data[6][0] - 4 * data[5][0] * data[6][0] * data[6][1] - 2 * data[6][0] * data[6][0] * data[5][1] - 2 * data[0][2] * data[0][0] - 2 * data[1][2] * data[1][0] - 2 * data[4][2] * data[4][0] + 2 * data[6][1] * data[4][0] + 2 * data[4][1] * data[6][0];
        data2[1][8] = 2 * data[2][0] * data[2][0] * data[6][1] * data[6][2] + 4 * data[2][0] * data[2][1] * data[6][0] * data[6][2] + 4 * data[2][0] * data[2][2] * data[6][0] * data[6][1] + 2 * data[2][1] * data[2][2] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][1] * data[6][2] + 4 * data[3][0] * data[3][1] * data[6][0] * data[6][2] + 4 * data[3][0] * data[3][2] * data[6][0] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][1] * data[6][2] + 4 * data[5][0] * data[5][1] * data[6][0] * data[6][2] + 4 * data[5][0] * data[5][2] * data[6][0] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][0] * data[6][0] - 2 * data[6][1] * data[6][1] * data[5][0] - 4 * data[5][1] * data[6][0] * data[6][1] - 2 * data[0][2] * data[0][1] - 2 * data[1][2] * data[1][1] + 2 * data[4][0] * data[6][0] - 2 * data[4][2] * data[4][1] + 2 * data[4][1] * data[6][1] - 2 * data[5][0];
        data2[1][9] = 4 * data[2][0] * data[2][1] * data[6][1] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][1] * data[6][1] + 2 * data[2][1] * data[2][1] * data[6][0] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][0] * data[6][1] + 4 * data[3][0] * data[3][1] * data[6][1] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][0] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][0] * data[6][1] + 4 * data[5][0] * data[5][1] * data[6][1] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][0] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][0] * data[6][1] - 2 * data[5][1] * data[6][1] * data[6][1] - 2 * data[0][2] * data[0][0] - 2 * data[1][2] * data[1][0] + 2 * data[2][0] * data[2][2] + 2 * data[3][0] * data[3][2] - 2 * data[4][2] * data[4][0] + 2 * data[6][1] * data[4][0] + 2 * data[4][1] * data[6][0] + 2 * data[5][0] * data[5][2] - 2 * data[5][1];
        data2[1][10] = 2 * data[2][1] * data[2][1] * data[6][1] * data[6][2] + 2 * data[2][1] * data[2][2] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][1] * data[6][1] - 2 * data[0][2] * data[0][1] - 2 * data[1][2] * data[1][1] + 2 * data[2][1] * data[2][2] + 2 * data[3][1] * data[3][2] - 2 * data[4][2] * data[4][1] + 2 * data[4][1] * data[6][1] + 2 * data[5][1] * data[5][2];
        data2[1][11] = -4 * data[5][0] * data[6][0] * data[6][2] - 2 * data[6][0] * data[6][0] * data[5][2] + 2 * data[6][2] * data[4][0] + 2 * data[4][2] * data[6][0];
        data2[1][12] = data[6][2] * data[6][2] * data[2][0] * data[2][0] + 4 * data[6][0] * data[2][0] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][0] * data[6][0] + data[6][2] * data[6][2] * data[3][0] * data[3][0] + 4 * data[6][0] * data[3][0] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][0] * data[6][0] + data[6][2] * data[6][2] * data[5][0] * data[5][0] + 4 * data[6][0] * data[5][0] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][0] * data[6][0] - 4 * data[5][0] * data[6][1] * data[6][2] - 4 * data[5][1] * data[6][0] * data[6][2] - 4 * data[5][2] * data[6][0] * data[6][1] - data[0][2] * data[0][2] - data[1][2] * data[1][2] + 2 * data[6][2] * data[4][1] - data[4][2] * data[4][2] + 2 * data[4][2] * data[6][1] - data[6][0] * data[6][0] + 1;
        data2[1][13] = 2 * data[2][0] * data[2][1] * data[6][2] * data[6][2] + 4 * data[2][0] * data[2][2] * data[6][1] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][0] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][2] * data[6][2] + 4 * data[3][0] * data[3][2] * data[6][1] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][0] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][2] * data[6][2] + 4 * data[5][0] * data[5][2] * data[6][1] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][0] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][0] * data[6][1] - 4 * data[5][1] * data[6][1] * data[6][2] - 2 * data[6][1] * data[6][1] * data[5][2] + 2 * data[6][2] * data[4][0] + 2 * data[4][2] * data[6][0] - 2 * data[6][1] * data[6][0] - 2 * data[5][2];
        data2[1][14] = data[2][1] * data[2][1] * data[6][2] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][1] * data[6][2] + data[2][2] * data[2][2] * data[6][1] * data[6][1] + data[3][1] * data[3][1] * data[6][2] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][1] * data[6][2] + data[3][2] * data[3][2] * data[6][1] * data[6][1] + data[5][1] * data[5][1] * data[6][2] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][1] * data[6][2] + data[5][2] * data[5][2] * data[6][1] * data[6][1] - data[0][2] * data[0][2] - data[1][2] * data[1][2] + data[2][2] * data[2][2] + data[3][2] * data[3][2] + 2 * data[6][2] * data[4][1] - data[4][2] * data[4][2] + 2 * data[4][2] * data[6][1] + data[5][2] * data[5][2] - data[6][1] * data[6][1];
        data2[1][15] = -2 * data[5][0] * data[6][2] * data[6][2] - 4 * data[5][2] * data[6][0] * data[6][2] + 2 * data[4][2] * data[6][2];
        data2[1][16] = 2 * data[2][0] * data[2][2] * data[6][2] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][2] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][2] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][0] * data[6][2] - 2 * data[5][1] * data[6][2] * data[6][2] - 4 * data[5][2] * data[6][1] * data[6][2] - 2 * data[6][0] * data[6][2];
        data2[1][17] = 2 * data[2][1] * data[2][2] * data[6][2] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][2] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][2] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][1] * data[6][2] + 2 * data[4][2] * data[6][2] - 2 * data[6][2] * data[6][1];
        data2[1][18] = -2 * data[5][2] * data[6][2] * data[6][2];
        data2[1][19] = data[2][2] * data[2][2] * data[6][2] * data[6][2] + data[3][2] * data[3][2] * data[6][2] * data[6][2] + data[5][2] * data[5][2] * data[6][2] * data[6][2] - data[6][2] * data[6][2];
        data2[1][20] = 0;
        data2[2][0] = 0;
        data2[2][1] = data[0][0] * data[2][0] * data[6][0] * data[6][0] + data[1][0] * data[3][0] * data[6][0] * data[6][0] + data[4][0] * data[5][0] * data[6][0] * data[6][0] - data[0][0] * data[0][0] * data[6][0] - data[1][0] * data[1][0] * data[6][0] - data[4][0] * data[4][0] * data[6][0];
        data2[2][2] = 2 * data[0][0] * data[2][0] * data[6][0] * data[6][1] + data[0][0] * data[2][1] * data[6][0] * data[6][0] + data[0][1] * data[2][0] * data[6][0] * data[6][0] + 2 * data[1][0] * data[3][0] * data[6][0] * data[6][1] + data[1][0] * data[3][1] * data[6][0] * data[6][0] + data[1][1] * data[3][0] * data[6][0] * data[6][0] + 2 * data[4][0] * data[5][0] * data[6][0] * data[6][1] + data[4][0] * data[5][1] * data[6][0] * data[6][0] + data[4][1] * data[5][0] * data[6][0] * data[6][0] - data[0][0] * data[0][0] * data[6][1] - 2 * data[0][0] * data[0][1] * data[6][0] - data[1][0] * data[1][0] * data[6][1] - 2 * data[1][0] * data[1][1] * data[6][0] - data[4][0] * data[4][0] * data[6][1] - 2 * data[4][0] * data[4][1] * data[6][0];
        data2[2][3] = data[0][0] * data[2][0] * data[6][1] * data[6][1] + 2 * data[0][0] * data[2][1] * data[6][0] * data[6][1] + 2 * data[0][1] * data[2][0] * data[6][0] * data[6][1] + data[0][1] * data[2][1] * data[6][0] * data[6][0] + data[1][0] * data[3][0] * data[6][1] * data[6][1] + 2 * data[1][0] * data[3][1] * data[6][0] * data[6][1] + 2 * data[1][1] * data[3][0] * data[6][0] * data[6][1] + data[1][1] * data[3][1] * data[6][0] * data[6][0] + data[4][0] * data[5][0] * data[6][1] * data[6][1] + 2 * data[4][0] * data[5][1] * data[6][0] * data[6][1] + 2 * data[4][1] * data[5][0] * data[6][0] * data[6][1] + data[4][1] * data[5][1] * data[6][0] * data[6][0] - 2 * data[0][0] * data[0][1] * data[6][1] - data[0][1] * data[0][1] * data[6][0] - 2 * data[1][0] * data[1][1] * data[6][1] - data[1][1] * data[1][1] * data[6][0] - 2 * data[4][0] * data[4][1] * data[6][1] - data[4][1] * data[4][1] * data[6][0] + data[2][0] * data[0][0] + data[3][0] * data[1][0] + data[4][0] * data[5][0];
        data2[2][4] = data[0][0] * data[2][1] * data[6][1] * data[6][1] + data[0][1] * data[2][0] * data[6][1] * data[6][1] + 2 * data[0][1] * data[2][1] * data[6][0] * data[6][1] + data[1][0] * data[3][1] * data[6][1] * data[6][1] + data[1][1] * data[3][0] * data[6][1] * data[6][1] + 2 * data[1][1] * data[3][1] * data[6][0] * data[6][1] + data[4][0] * data[5][1] * data[6][1] * data[6][1] + data[4][1] * data[5][0] * data[6][1] * data[6][1] + 2 * data[4][1] * data[5][1] * data[6][0] * data[6][1] - data[0][1] * data[0][1] * data[6][1] - data[1][1] * data[1][1] * data[6][1] - data[4][1] * data[4][1] * data[6][1] + data[2][1] * data[0][0] + data[2][0] * data[0][1] + data[3][1] * data[1][0] + data[3][0] * data[1][1] + data[4][0] * data[5][1] + data[4][1] * data[5][0];
        data2[2][5] = data[0][1] * data[2][1] * data[6][1] * data[6][1] + data[1][1] * data[3][1] * data[6][1] * data[6][1] + data[4][1] * data[5][1] * data[6][1] * data[6][1] + data[0][1] * data[2][1] + data[1][1] * data[3][1] + data[4][1] * data[5][1];
        data2[2][6] = -data[5][0] * (double) pow((double) data[6][0], (double) 3) + data[4][0] * data[6][0] * data[6][0];
        data2[2][7] = 2 * data[0][0] * data[2][0] * data[6][0] * data[6][2] + data[0][0] * data[2][2] * data[6][0] * data[6][0] + data[0][2] * data[2][0] * data[6][0] * data[6][0] + 2 * data[1][0] * data[3][0] * data[6][0] * data[6][2] + data[1][0] * data[3][2] * data[6][0] * data[6][0] + data[1][2] * data[3][0] * data[6][0] * data[6][0] + 2 * data[4][0] * data[5][0] * data[6][0] * data[6][2] + data[4][0] * data[5][2] * data[6][0] * data[6][0] + data[4][2] * data[5][0] * data[6][0] * data[6][0] - 3 * data[5][0] * data[6][0] * data[6][0] * data[6][1] - data[5][1] * (double) pow((double) data[6][0], (double) 3) - data[0][0] * data[0][0] * data[6][2] - 2 * data[0][0] * data[0][2] * data[6][0] - data[1][0] * data[1][0] * data[6][2] - 2 * data[1][0] * data[1][2] * data[6][0] - data[4][0] * data[4][0] * data[6][2] - 2 * data[4][0] * data[4][2] * data[6][0] + 2 * data[4][0] * data[6][0] * data[6][1] + data[4][1] * data[6][0] * data[6][0];
        data2[2][8] = 2 * data[0][0] * data[2][0] * data[6][1] * data[6][2] + 2 * data[0][0] * data[2][1] * data[6][0] * data[6][2] + 2 * data[0][0] * data[2][2] * data[6][0] * data[6][1] + 2 * data[0][1] * data[2][0] * data[6][0] * data[6][2] + data[0][1] * data[2][2] * data[6][0] * data[6][0] + 2 * data[0][2] * data[2][0] * data[6][0] * data[6][1] + data[0][2] * data[2][1] * data[6][0] * data[6][0] + 2 * data[1][0] * data[3][0] * data[6][1] * data[6][2] + 2 * data[1][0] * data[3][1] * data[6][0] * data[6][2] + 2 * data[1][0] * data[3][2] * data[6][0] * data[6][1] + 2 * data[1][1] * data[3][0] * data[6][0] * data[6][2] + data[1][1] * data[3][2] * data[6][0] * data[6][0] + 2 * data[1][2] * data[3][0] * data[6][0] * data[6][1] + data[1][2] * data[3][1] * data[6][0] * data[6][0] + 2 * data[4][0] * data[5][0] * data[6][1] * data[6][2] + 2 * data[4][0] * data[5][1] * data[6][0] * data[6][2] + 2 * data[4][0] * data[5][2] * data[6][0] * data[6][1] + 2 * data[4][1] * data[5][0] * data[6][0] * data[6][2] + data[4][1] * data[5][2] * data[6][0] * data[6][0] + 2 * data[4][2] * data[5][0] * data[6][0] * data[6][1] + data[4][2] * data[5][1] * data[6][0] * data[6][0] - 3 * data[5][0] * data[6][0] * data[6][1] * data[6][1] - 3 * data[5][1] * data[6][0] * data[6][0] * data[6][1] - 2 * data[0][0] * data[0][1] * data[6][2] - 2 * data[0][0] * data[0][2] * data[6][1] - 2 * data[0][1] * data[0][2] * data[6][0] - 2 * data[1][0] * data[1][1] * data[6][2] - 2 * data[1][0] * data[1][2] * data[6][1] - 2 * data[1][1] * data[1][2] * data[6][0] - 2 * data[4][0] * data[4][1] * data[6][2] - 2 * data[4][0] * data[4][2] * data[6][1] + data[4][0] * data[6][1] * data[6][1] - 2 * data[4][1] * data[4][2] * data[6][0] + 2 * data[4][1] * data[6][0] * data[6][1] - data[5][0] * data[6][0] - data[4][0];
        data2[2][9] = 2 * data[0][0] * data[2][1] * data[6][1] * data[6][2] + data[0][0] * data[2][2] * data[6][1] * data[6][1] + 2 * data[0][1] * data[2][0] * data[6][1] * data[6][2] + 2 * data[0][1] * data[2][1] * data[6][0] * data[6][2] + 2 * data[0][1] * data[2][2] * data[6][0] * data[6][1] + data[0][2] * data[2][0] * data[6][1] * data[6][1] + 2 * data[0][2] * data[2][1] * data[6][0] * data[6][1] + 2 * data[1][0] * data[3][1] * data[6][1] * data[6][2] + data[1][0] * data[3][2] * data[6][1] * data[6][1] + 2 * data[1][1] * data[3][0] * data[6][1] * data[6][2] + 2 * data[1][1] * data[3][1] * data[6][0] * data[6][2] + 2 * data[1][1] * data[3][2] * data[6][0] * data[6][1] + data[1][2] * data[3][0] * data[6][1] * data[6][1] + 2 * data[1][2] * data[3][1] * data[6][0] * data[6][1] + 2 * data[4][0] * data[5][1] * data[6][1] * data[6][2] + data[4][0] * data[5][2] * data[6][1] * data[6][1] + 2 * data[4][1] * data[5][0] * data[6][1] * data[6][2] + 2 * data[4][1] * data[5][1] * data[6][0] * data[6][2] + 2 * data[4][1] * data[5][2] * data[6][0] * data[6][1] + data[4][2] * data[5][0] * data[6][1] * data[6][1] + 2 * data[4][2] * data[5][1] * data[6][0] * data[6][1] - data[5][0] * (double) pow((double) data[6][1], (double) 3) - 3 * data[5][1] * data[6][0] * data[6][1] * data[6][1] - data[0][1] * data[0][1] * data[6][2] - 2 * data[0][1] * data[0][2] * data[6][1] - data[1][1] * data[1][1] * data[6][2] - 2 * data[1][1] * data[1][2] * data[6][1] - data[4][1] * data[4][1] * data[6][2] - 2 * data[4][1] * data[4][2] * data[6][1] + data[4][1] * data[6][1] * data[6][1] + data[2][2] * data[0][0] + data[2][0] * data[0][2] + data[3][2] * data[1][0] + data[3][0] * data[1][2] + data[4][0] * data[5][2] + data[4][2] * data[5][0] - data[5][0] * data[6][1] - data[5][1] * data[6][0] - data[4][1];
        data2[2][10] = 2 * data[0][1] * data[2][1] * data[6][1] * data[6][2] + data[0][1] * data[2][2] * data[6][1] * data[6][1] + data[0][2] * data[2][1] * data[6][1] * data[6][1] + 2 * data[1][1] * data[3][1] * data[6][1] * data[6][2] + data[1][1] * data[3][2] * data[6][1] * data[6][1] + data[1][2] * data[3][1] * data[6][1] * data[6][1] + 2 * data[4][1] * data[5][1] * data[6][1] * data[6][2] + data[4][1] * data[5][2] * data[6][1] * data[6][1] + data[4][2] * data[5][1] * data[6][1] * data[6][1] - data[5][1] * (double) pow((double) data[6][1], (double) 3) + data[2][2] * data[0][1] + data[2][1] * data[0][2] + data[3][2] * data[1][1] + data[3][1] * data[1][2] + data[4][1] * data[5][2] + data[4][2] * data[5][1] - data[5][1] * data[6][1];
        data2[2][11] = -3 * data[5][0] * data[6][0] * data[6][0] * data[6][2] - data[5][2] * (double) pow((double) data[6][0], (double) 3) + 2 * data[4][0] * data[6][0] * data[6][2] + data[4][2] * data[6][0] * data[6][0];
        data2[2][12] = data[0][0] * data[2][0] * data[6][2] * data[6][2] + 2 * data[0][0] * data[2][2] * data[6][0] * data[6][2] + 2 * data[0][2] * data[2][0] * data[6][0] * data[6][2] + data[0][2] * data[2][2] * data[6][0] * data[6][0] + data[1][0] * data[3][0] * data[6][2] * data[6][2] + 2 * data[1][0] * data[3][2] * data[6][0] * data[6][2] + 2 * data[1][2] * data[3][0] * data[6][0] * data[6][2] + data[1][2] * data[3][2] * data[6][0] * data[6][0] + data[4][0] * data[5][0] * data[6][2] * data[6][2] + 2 * data[4][0] * data[5][2] * data[6][0] * data[6][2] + 2 * data[4][2] * data[5][0] * data[6][0] * data[6][2] + data[4][2] * data[5][2] * data[6][0] * data[6][0] - 6 * data[5][0] * data[6][0] * data[6][1] * data[6][2] - 3 * data[5][1] * data[6][0] * data[6][0] * data[6][2] - 3 * data[5][2] * data[6][0] * data[6][0] * data[6][1] - 2 * data[0][0] * data[0][2] * data[6][2] - data[0][2] * data[0][2] * data[6][0] - 2 * data[1][0] * data[1][2] * data[6][2] - data[1][2] * data[1][2] * data[6][0] - 2 * data[4][0] * data[4][2] * data[6][2] + 2 * data[6][2] * data[6][1] * data[4][0] + 2 * data[4][1] * data[6][0] * data[6][2] - data[4][2] * data[4][2] * data[6][0] + 2 * data[4][2] * data[6][0] * data[6][1] + data[6][0];
        data2[2][13] = data[0][0] * data[2][1] * data[6][2] * data[6][2] + 2 * data[0][0] * data[2][2] * data[6][1] * data[6][2] + data[0][1] * data[2][0] * data[6][2] * data[6][2] + 2 * data[0][1] * data[2][2] * data[6][0] * data[6][2] + 2 * data[0][2] * data[2][0] * data[6][1] * data[6][2] + 2 * data[0][2] * data[2][1] * data[6][0] * data[6][2] + 2 * data[0][2] * data[2][2] * data[6][0] * data[6][1] + data[1][0] * data[3][1] * data[6][2] * data[6][2] + 2 * data[1][0] * data[3][2] * data[6][1] * data[6][2] + data[1][1] * data[3][0] * data[6][2] * data[6][2] + 2 * data[1][1] * data[3][2] * data[6][0] * data[6][2] + 2 * data[1][2] * data[3][0] * data[6][1] * data[6][2] + 2 * data[1][2] * data[3][1] * data[6][0] * data[6][2] + 2 * data[1][2] * data[3][2] * data[6][0] * data[6][1] + data[4][0] * data[5][1] * data[6][2] * data[6][2] + 2 * data[4][0] * data[5][2] * data[6][1] * data[6][2] + data[4][1] * data[5][0] * data[6][2] * data[6][2] + 2 * data[4][1] * data[5][2] * data[6][0] * data[6][2] + 2 * data[4][2] * data[5][0] * data[6][1] * data[6][2] + 2 * data[4][2] * data[5][1] * data[6][0] * data[6][2] + 2 * data[4][2] * data[5][2] * data[6][0] * data[6][1] - 3 * data[5][0] * data[6][1] * data[6][1] * data[6][2] - 6 * data[5][1] * data[6][0] * data[6][1] * data[6][2] - 3 * data[5][2] * data[6][0] * data[6][1] * data[6][1] - 2 * data[0][1] * data[0][2] * data[6][2] - data[0][2] * data[0][2] * data[6][1] - 2 * data[1][1] * data[1][2] * data[6][2] - data[1][2] * data[1][2] * data[6][1] - 2 * data[4][1] * data[4][2] * data[6][2] + 2 * data[4][1] * data[6][1] * data[6][2] - data[4][2] * data[4][2] * data[6][1] + data[4][2] * data[6][1] * data[6][1] - data[5][0] * data[6][2] - data[5][2] * data[6][0] - data[4][2] + data[6][1];
        data2[2][14] = data[0][1] * data[2][1] * data[6][2] * data[6][2] + 2 * data[6][2] * data[6][1] * data[2][2] * data[0][1] + 2 * data[6][2] * data[6][1] * data[2][1] * data[0][2] + data[0][2] * data[2][2] * data[6][1] * data[6][1] + data[1][1] * data[3][1] * data[6][2] * data[6][2] + 2 * data[6][2] * data[6][1] * data[3][2] * data[1][1] + 2 * data[6][2] * data[6][1] * data[3][1] * data[1][2] + data[1][2] * data[3][2] * data[6][1] * data[6][1] + data[4][1] * data[5][1] * data[6][2] * data[6][2] + 2 * data[6][2] * data[6][1] * data[4][1] * data[5][2] + 2 * data[6][2] * data[6][1] * data[4][2] * data[5][1] + data[4][2] * data[5][2] * data[6][1] * data[6][1] - 3 * data[5][1] * data[6][1] * data[6][1] * data[6][2] - data[5][2] * (double) pow((double) data[6][1], (double) 3) + data[2][2] * data[0][2] + data[3][2] * data[1][2] + data[4][2] * data[5][2] - data[5][1] * data[6][2] - data[5][2] * data[6][1];
        data2[2][15] = -3 * data[5][0] * data[6][0] * data[6][2] * data[6][2] - 3 * data[5][2] * data[6][0] * data[6][0] * data[6][2] + data[4][0] * data[6][2] * data[6][2] + 2 * data[4][2] * data[6][0] * data[6][2];
        data2[2][16] = data[6][2] * data[6][2] * data[2][2] * data[0][0] + data[6][2] * data[6][2] * data[2][0] * data[0][2] + 2 * data[6][2] * data[6][0] * data[2][2] * data[0][2] + data[6][2] * data[6][2] * data[3][2] * data[1][0] + data[6][2] * data[6][2] * data[3][0] * data[1][2] + 2 * data[6][2] * data[6][0] * data[3][2] * data[1][2] + data[6][2] * data[6][2] * data[4][0] * data[5][2] + data[6][2] * data[6][2] * data[4][2] * data[5][0] + 2 * data[6][2] * data[6][0] * data[4][2] * data[5][2] - 3 * data[5][0] * data[6][1] * data[6][2] * data[6][2] - 3 * data[5][1] * data[6][0] * data[6][2] * data[6][2] - 6 * data[5][2] * data[6][0] * data[6][1] * data[6][2] - data[6][2] * data[0][2] * data[0][2] - data[6][2] * data[1][2] * data[1][2] + data[4][1] * data[6][2] * data[6][2] - data[6][2] * data[4][2] * data[4][2] + 2 * data[4][2] * data[6][1] * data[6][2] + data[6][2];
        data2[2][17] = data[0][1] * data[2][2] * data[6][2] * data[6][2] + data[0][2] * data[2][1] * data[6][2] * data[6][2] + 2 * data[0][2] * data[2][2] * data[6][1] * data[6][2] + data[1][1] * data[3][2] * data[6][2] * data[6][2] + data[1][2] * data[3][1] * data[6][2] * data[6][2] + 2 * data[1][2] * data[3][2] * data[6][1] * data[6][2] + data[4][1] * data[5][2] * data[6][2] * data[6][2] + data[4][2] * data[5][1] * data[6][2] * data[6][2] + 2 * data[4][2] * data[5][2] * data[6][1] * data[6][2] - 3 * data[5][1] * data[6][1] * data[6][2] * data[6][2] - 3 * data[5][2] * data[6][1] * data[6][1] * data[6][2] - data[5][2] * data[6][2];
        data2[2][18] = -data[5][0] * (double) pow((double) data[6][2], (double) 3) - 3 * data[5][2] * data[6][0] * data[6][2] * data[6][2] + data[4][2] * data[6][2] * data[6][2];
        data2[2][19] = data[0][2] * data[2][2] * data[6][2] * data[6][2] + data[1][2] * data[3][2] * data[6][2] * data[6][2] + data[4][2] * data[5][2] * data[6][2] * data[6][2] - data[5][1] * (double) pow((double) data[6][2], (double) 3) - 3 * data[5][2] * data[6][1] * data[6][2] * data[6][2];
        data2[2][20] = -data[5][2] * (double) pow((double) data[6][2], (double) 3);
        data2[3][0] = data[2][0] * data[2][0] * data[6][0] * data[6][0] + data[3][0] * data[3][0] * data[6][0] * data[6][0] + data[5][0] * data[5][0] * data[6][0] * data[6][0] - 2 * data[0][0] * data[2][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][0] + data[0][0] * data[0][0] + data[1][0] * data[1][0] + data[4][0] * data[4][0];
        data2[3][1] = 2 * data[2][0] * data[2][0] * data[6][0] * data[6][1] + 2 * data[2][0] * data[2][1] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][0] * data[6][0] - 2 * data[0][0] * data[2][0] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][0] - 2 * data[0][1] * data[2][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][1] - 2 * data[1][0] * data[3][1] * data[6][0] - 2 * data[1][1] * data[3][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][1] - 2 * data[4][0] * data[5][1] * data[6][0] - 2 * data[4][1] * data[5][0] * data[6][0] + 2 * data[0][1] * data[0][0] + 2 * data[1][1] * data[1][0] + 2 * data[4][1] * data[4][0];
        data2[3][2] = data[2][0] * data[2][0] * data[6][1] * data[6][1] + 4 * data[2][0] * data[2][1] * data[6][0] * data[6][1] + data[2][1] * data[2][1] * data[6][0] * data[6][0] + data[3][0] * data[3][0] * data[6][1] * data[6][1] + 4 * data[3][0] * data[3][1] * data[6][0] * data[6][1] + data[3][1] * data[3][1] * data[6][0] * data[6][0] + data[5][0] * data[5][0] * data[6][1] * data[6][1] + 4 * data[5][0] * data[5][1] * data[6][0] * data[6][1] + data[5][1] * data[5][1] * data[6][0] * data[6][0] - 2 * data[0][0] * data[2][0] * data[6][0] - 2 * data[0][0] * data[2][1] * data[6][1] - 2 * data[0][1] * data[2][0] * data[6][1] - 2 * data[0][1] * data[2][1] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][0] - 2 * data[1][0] * data[3][1] * data[6][1] - 2 * data[1][1] * data[3][0] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][0] - 2 * data[4][0] * data[5][1] * data[6][1] - 2 * data[4][1] * data[5][0] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][0] + data[0][0] * data[0][0] + data[0][1] * data[0][1] + data[1][0] * data[1][0] + data[1][1] * data[1][1] - data[2][0] * data[2][0] - data[3][0] * data[3][0] + data[4][0] * data[4][0] + data[4][1] * data[4][1] - data[5][0] * data[5][0];
        data2[3][3] = 2 * data[2][0] * data[2][1] * data[6][1] * data[6][1] + 2 * data[2][1] * data[2][1] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][0] * data[6][1] - 2 * data[0][0] * data[2][0] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][0] - 2 * data[0][1] * data[2][0] * data[6][0] - 2 * data[0][1] * data[2][1] * data[6][1] - 2 * data[1][0] * data[3][0] * data[6][1] - 2 * data[1][0] * data[3][1] * data[6][0] - 2 * data[1][1] * data[3][0] * data[6][0] - 2 * data[1][1] * data[3][1] * data[6][1] - 2 * data[4][0] * data[5][0] * data[6][1] - 2 * data[4][0] * data[5][1] * data[6][0] - 2 * data[4][1] * data[5][0] * data[6][0] - 2 * data[4][1] * data[5][1] * data[6][1] + 2 * data[0][1] * data[0][0] + 2 * data[1][1] * data[1][0] - 2 * data[2][0] * data[2][1] - 2 * data[3][0] * data[3][1] + 2 * data[4][1] * data[4][0] - 2 * data[5][0] * data[5][1];
        data2[3][4] = data[2][1] * data[2][1] * data[6][1] * data[6][1] + data[3][1] * data[3][1] * data[6][1] * data[6][1] + data[5][1] * data[5][1] * data[6][1] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][1] - 2 * data[0][1] * data[2][0] * data[6][1] - 2 * data[0][1] * data[2][1] * data[6][0] - 2 * data[1][0] * data[3][1] * data[6][1] - 2 * data[1][1] * data[3][0] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][0] - 2 * data[4][0] * data[5][1] * data[6][1] - 2 * data[4][1] * data[5][0] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][0] + data[0][1] * data[0][1] + data[1][1] * data[1][1] - data[2][1] * data[2][1] - data[3][1] * data[3][1] + data[4][1] * data[4][1] - data[5][1] * data[5][1];
        data2[3][5] = -2 * data[0][1] * data[2][1] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][1];
        data2[3][6] = 2 * data[2][0] * data[2][0] * data[6][0] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][0] * data[6][0] - 2 * data[0][0] * data[2][0] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][0] - 2 * data[0][2] * data[2][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][0] - 2 * data[1][2] * data[3][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][0] - 2 * data[4][2] * data[5][0] * data[6][0] + 2 * data[0][2] * data[0][0] + 2 * data[1][2] * data[1][0] + 2 * data[4][2] * data[4][0];
        data2[3][7] = 2 * data[2][0] * data[2][0] * data[6][1] * data[6][2] + 4 * data[2][0] * data[2][1] * data[6][0] * data[6][2] + 4 * data[2][0] * data[2][2] * data[6][0] * data[6][1] + 2 * data[2][1] * data[2][2] * data[6][0] * data[6][0] + 2 * data[3][0] * data[3][0] * data[6][1] * data[6][2] + 4 * data[3][0] * data[3][1] * data[6][0] * data[6][2] + 4 * data[3][0] * data[3][2] * data[6][0] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][0] * data[6][0] + 2 * data[5][0] * data[5][0] * data[6][1] * data[6][2] + 4 * data[5][0] * data[5][1] * data[6][0] * data[6][2] + 4 * data[5][0] * data[5][2] * data[6][0] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][0] * data[6][0] - 2 * data[0][0] * data[2][1] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][1] - 2 * data[0][1] * data[2][0] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][0] - 2 * data[0][2] * data[2][0] * data[6][1] - 2 * data[0][2] * data[2][1] * data[6][0] - 2 * data[1][0] * data[3][1] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][1] - 2 * data[1][1] * data[3][0] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][0] - 2 * data[1][2] * data[3][0] * data[6][1] - 2 * data[1][2] * data[3][1] * data[6][0] - 2 * data[4][0] * data[5][1] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][1] - 2 * data[4][1] * data[5][0] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][0] - 2 * data[4][2] * data[5][0] * data[6][1] - 2 * data[4][2] * data[5][1] * data[6][0] + 2 * data[5][0] * data[6][0] * data[6][0] + 2 * data[0][2] * data[0][1] + 2 * data[1][2] * data[1][1] + 2 * data[4][2] * data[4][1] + 2 * data[5][0];
        data2[3][8] = 4 * data[2][0] * data[2][1] * data[6][1] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][1] * data[6][1] + 2 * data[2][1] * data[2][1] * data[6][0] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][0] * data[6][1] + 4 * data[3][0] * data[3][1] * data[6][1] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][0] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][0] * data[6][1] + 4 * data[5][0] * data[5][1] * data[6][1] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][0] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][0] * data[6][1] - 2 * data[0][0] * data[2][0] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][0] - 2 * data[0][1] * data[2][1] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][1] - 2 * data[0][2] * data[2][0] * data[6][0] - 2 * data[0][2] * data[2][1] * data[6][1] - 2 * data[1][0] * data[3][0] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][0] - 2 * data[1][1] * data[3][1] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][1] - 2 * data[1][2] * data[3][0] * data[6][0] - 2 * data[1][2] * data[3][1] * data[6][1] - 2 * data[4][0] * data[5][0] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][0] - 2 * data[4][1] * data[5][1] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][1] - 2 * data[4][2] * data[5][0] * data[6][0] - 2 * data[4][2] * data[5][1] * data[6][1] + 4 * data[5][0] * data[6][0] * data[6][1] + 2 * data[6][0] * data[6][0] * data[5][1] + 2 * data[0][2] * data[0][0] + 2 * data[1][2] * data[1][0] - 2 * data[2][0] * data[2][2] - 2 * data[3][0] * data[3][2] + 2 * data[4][2] * data[4][0] - 2 * data[5][0] * data[5][2] + 2 * data[5][1];
        data2[3][9] = 2 * data[2][1] * data[2][1] * data[6][1] * data[6][2] + 2 * data[2][1] * data[2][2] * data[6][1] * data[6][1] + 2 * data[3][1] * data[3][1] * data[6][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][1] * data[6][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][1] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][1] - 2 * data[0][1] * data[2][0] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][0] - 2 * data[0][2] * data[2][0] * data[6][1] - 2 * data[0][2] * data[2][1] * data[6][0] - 2 * data[1][0] * data[3][1] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][1] - 2 * data[1][1] * data[3][0] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][0] - 2 * data[1][2] * data[3][0] * data[6][1] - 2 * data[1][2] * data[3][1] * data[6][0] - 2 * data[4][0] * data[5][1] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][1] - 2 * data[4][1] * data[5][0] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][0] - 2 * data[4][2] * data[5][0] * data[6][1] - 2 * data[4][2] * data[5][1] * data[6][0] + 2 * data[6][1] * data[6][1] * data[5][0] + 4 * data[5][1] * data[6][0] * data[6][1] + 2 * data[0][2] * data[0][1] + 2 * data[1][2] * data[1][1] - 2 * data[2][1] * data[2][2] - 2 * data[3][1] * data[3][2] + 2 * data[4][2] * data[4][1] - 2 * data[5][1] * data[5][2];
        data2[3][10] = -2 * data[0][1] * data[2][1] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][1] - 2 * data[0][2] * data[2][1] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][1] - 2 * data[1][2] * data[3][1] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][1] - 2 * data[4][2] * data[5][1] * data[6][1] + 2 * data[5][1] * data[6][1] * data[6][1];
        data2[3][11] = data[6][2] * data[6][2] * data[2][0] * data[2][0] + 4 * data[6][0] * data[2][0] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][0] * data[6][0] + data[6][2] * data[6][2] * data[3][0] * data[3][0] + 4 * data[6][0] * data[3][0] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][0] * data[6][0] + data[6][2] * data[6][2] * data[5][0] * data[5][0] + 4 * data[6][0] * data[5][0] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][0] * data[6][0] - 2 * data[6][2] * data[2][2] * data[0][0] - 2 * data[6][2] * data[2][0] * data[0][2] - 2 * data[6][0] * data[2][2] * data[0][2] - 2 * data[6][2] * data[3][2] * data[1][0] - 2 * data[6][2] * data[3][0] * data[1][2] - 2 * data[6][0] * data[3][2] * data[1][2] - 2 * data[6][2] * data[4][0] * data[5][2] - 2 * data[6][2] * data[4][2] * data[5][0] - 2 * data[6][0] * data[4][2] * data[5][2] + data[0][2] * data[0][2] + data[1][2] * data[1][2] + data[4][2] * data[4][2] - data[6][0] * data[6][0] - 1;
        data2[3][12] = 2 * data[2][0] * data[2][1] * data[6][2] * data[6][2] + 4 * data[2][0] * data[2][2] * data[6][1] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][0] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][2] * data[6][2] + 4 * data[3][0] * data[3][2] * data[6][1] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][0] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][2] * data[6][2] + 4 * data[5][0] * data[5][2] * data[6][1] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][0] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][0] * data[6][1] - 2 * data[0][1] * data[2][2] * data[6][2] - 2 * data[0][2] * data[2][1] * data[6][2] - 2 * data[0][2] * data[2][2] * data[6][1] - 2 * data[1][1] * data[3][2] * data[6][2] - 2 * data[1][2] * data[3][1] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][1] - 2 * data[4][1] * data[5][2] * data[6][2] - 2 * data[4][2] * data[5][1] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][1] + 4 * data[5][0] * data[6][0] * data[6][2] + 2 * data[6][0] * data[6][0] * data[5][2] - 2 * data[6][1] * data[6][0] + 2 * data[5][2];
        data2[3][13] = data[2][1] * data[2][1] * data[6][2] * data[6][2] + 4 * data[2][1] * data[2][2] * data[6][1] * data[6][2] + data[2][2] * data[2][2] * data[6][1] * data[6][1] + data[3][1] * data[3][1] * data[6][2] * data[6][2] + 4 * data[3][1] * data[3][2] * data[6][1] * data[6][2] + data[3][2] * data[3][2] * data[6][1] * data[6][1] + data[5][1] * data[5][1] * data[6][2] * data[6][2] + 4 * data[5][1] * data[5][2] * data[6][1] * data[6][2] + data[5][2] * data[5][2] * data[6][1] * data[6][1] - 2 * data[6][2] * data[2][2] * data[0][0] - 2 * data[6][2] * data[2][0] * data[0][2] - 2 * data[6][0] * data[2][2] * data[0][2] - 2 * data[6][2] * data[3][2] * data[1][0] - 2 * data[6][2] * data[3][0] * data[1][2] - 2 * data[6][0] * data[3][2] * data[1][2] - 2 * data[6][2] * data[4][0] * data[5][2] - 2 * data[6][2] * data[4][2] * data[5][0] - 2 * data[6][0] * data[4][2] * data[5][2] + 4 * data[5][0] * data[6][1] * data[6][2] + 4 * data[5][1] * data[6][0] * data[6][2] + 4 * data[5][2] * data[6][0] * data[6][1] + data[0][2] * data[0][2] + data[1][2] * data[1][2] - data[2][2] * data[2][2] - data[3][2] * data[3][2] + data[4][2] * data[4][2] - data[5][2] * data[5][2] - data[6][1] * data[6][1];
        data2[3][14] = -2 * data[0][1] * data[2][2] * data[6][2] - 2 * data[0][2] * data[2][1] * data[6][2] - 2 * data[0][2] * data[2][2] * data[6][1] - 2 * data[1][1] * data[3][2] * data[6][2] - 2 * data[1][2] * data[3][1] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][1] - 2 * data[4][1] * data[5][2] * data[6][2] - 2 * data[4][2] * data[5][1] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][1] + 4 * data[5][1] * data[6][1] * data[6][2] + 2 * data[6][1] * data[6][1] * data[5][2];
        data2[3][15] = 2 * data[2][0] * data[2][2] * data[6][2] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][2] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][2] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][0] * data[6][2] - 2 * data[0][2] * data[2][2] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][2] - 2 * data[6][0] * data[6][2];
        data2[3][16] = 2 * data[2][1] * data[2][2] * data[6][2] * data[6][2] + 2 * data[2][2] * data[2][2] * data[6][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][2] * data[6][2] + 2 * data[3][2] * data[3][2] * data[6][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][2] * data[6][2] + 2 * data[5][2] * data[5][2] * data[6][1] * data[6][2] + 2 * data[5][0] * data[6][2] * data[6][2] + 4 * data[5][2] * data[6][0] * data[6][2] - 2 * data[6][2] * data[6][1];
        data2[3][17] = -2 * data[0][2] * data[2][2] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][2] + 2 * data[5][1] * data[6][2] * data[6][2] + 4 * data[5][2] * data[6][1] * data[6][2];
        data2[3][18] = data[2][2] * data[2][2] * data[6][2] * data[6][2] + data[3][2] * data[3][2] * data[6][2] * data[6][2] + data[5][2] * data[5][2] * data[6][2] * data[6][2] - data[6][2] * data[6][2];
        data2[3][19] = 2 * data[5][2] * data[6][2] * data[6][2];
        data2[3][20] = 0;
        data2[4][0] = data[2][0] * data[2][0] * (double) pow((double) data[6][0], (double) 3) + data[3][0] * data[3][0] * (double) pow((double) data[6][0], (double) 3) + data[5][0] * data[5][0] * (double) pow((double) data[6][0], (double) 3) - 2 * data[0][0] * data[2][0] * data[6][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][0] * data[6][0] + data[0][0] * data[0][0] * data[6][0] + data[1][0] * data[1][0] * data[6][0] + data[4][0] * data[4][0] * data[6][0];
        data2[4][1] = 3 * data[2][0] * data[2][0] * data[6][0] * data[6][0] * data[6][1] + 2 * data[2][0] * data[2][1] * (double) pow((double) data[6][0], (double) 3) + 3 * data[3][0] * data[3][0] * data[6][0] * data[6][0] * data[6][1] + 2 * data[3][0] * data[3][1] * (double) pow((double) data[6][0], (double) 3) + 3 * data[5][0] * data[5][0] * data[6][0] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * (double) pow((double) data[6][0], (double) 3) - 4 * data[0][0] * data[2][0] * data[6][0] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][0] * data[6][0] - 2 * data[0][1] * data[2][0] * data[6][0] * data[6][0] - 4 * data[1][0] * data[3][0] * data[6][0] * data[6][1] - 2 * data[1][0] * data[3][1] * data[6][0] * data[6][0] - 2 * data[1][1] * data[3][0] * data[6][0] * data[6][0] - 4 * data[4][0] * data[5][0] * data[6][0] * data[6][1] - 2 * data[4][0] * data[5][1] * data[6][0] * data[6][0] - 2 * data[4][1] * data[5][0] * data[6][0] * data[6][0] + data[0][0] * data[0][0] * data[6][1] + 2 * data[0][0] * data[0][1] * data[6][0] + data[1][0] * data[1][0] * data[6][1] + 2 * data[1][0] * data[1][1] * data[6][0] + data[4][0] * data[4][0] * data[6][1] + 2 * data[4][0] * data[4][1] * data[6][0];
        data2[4][2] = 3 * data[2][0] * data[2][0] * data[6][0] * data[6][1] * data[6][1] + 6 * data[2][0] * data[2][1] * data[6][0] * data[6][0] * data[6][1] + data[2][1] * data[2][1] * (double) pow((double) data[6][0], (double) 3) + 3 * data[3][0] * data[3][0] * data[6][0] * data[6][1] * data[6][1] + 6 * data[3][0] * data[3][1] * data[6][0] * data[6][0] * data[6][1] + data[3][1] * data[3][1] * (double) pow((double) data[6][0], (double) 3) + 3 * data[5][0] * data[5][0] * data[6][0] * data[6][1] * data[6][1] + 6 * data[5][0] * data[5][1] * data[6][0] * data[6][0] * data[6][1] + data[5][1] * data[5][1] * (double) pow((double) data[6][0], (double) 3) - 2 * data[0][0] * data[2][0] * data[6][1] * data[6][1] - 4 * data[0][0] * data[2][1] * data[6][0] * data[6][1] - 4 * data[0][1] * data[2][0] * data[6][0] * data[6][1] - 2 * data[0][1] * data[2][1] * data[6][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][1] * data[6][1] - 4 * data[1][0] * data[3][1] * data[6][0] * data[6][1] - 4 * data[1][1] * data[3][0] * data[6][0] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][1] * data[6][1] - 4 * data[4][0] * data[5][1] * data[6][0] * data[6][1] - 4 * data[4][1] * data[5][0] * data[6][0] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][0] * data[6][0] - data[0][0] * data[0][0] * data[6][0] + 2 * data[0][0] * data[0][1] * data[6][1] + data[0][1] * data[0][1] * data[6][0] - data[1][0] * data[1][0] * data[6][0] + 2 * data[1][0] * data[1][1] * data[6][1] + data[1][1] * data[1][1] * data[6][0] + data[2][0] * data[2][0] * data[6][0] + data[3][0] * data[3][0] * data[6][0] - data[4][0] * data[4][0] * data[6][0] + 2 * data[4][0] * data[4][1] * data[6][1] + data[4][1] * data[4][1] * data[6][0] + data[5][0] * data[5][0] * data[6][0] - 2 * data[2][0] * data[0][0] - 2 * data[3][0] * data[1][0] - 2 * data[4][0] * data[5][0];
        data2[4][3] = data[2][0] * data[2][0] * (double) pow((double) data[6][1], (double) 3) + 6 * data[2][0] * data[2][1] * data[6][0] * data[6][1] * data[6][1] + 3 * data[2][1] * data[2][1] * data[6][0] * data[6][0] * data[6][1] + data[3][0] * data[3][0] * (double) pow((double) data[6][1], (double) 3) + 6 * data[3][0] * data[3][1] * data[6][0] * data[6][1] * data[6][1] + 3 * data[3][1] * data[3][1] * data[6][0] * data[6][0] * data[6][1] + data[5][0] * data[5][0] * (double) pow((double) data[6][1], (double) 3) + 6 * data[5][0] * data[5][1] * data[6][0] * data[6][1] * data[6][1] + 3 * data[5][1] * data[5][1] * data[6][0] * data[6][0] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][1] * data[6][1] - 2 * data[0][1] * data[2][0] * data[6][1] * data[6][1] - 4 * data[0][1] * data[2][1] * data[6][0] * data[6][1] - 2 * data[1][0] * data[3][1] * data[6][1] * data[6][1] - 2 * data[1][1] * data[3][0] * data[6][1] * data[6][1] - 4 * data[1][1] * data[3][1] * data[6][0] * data[6][1] - 2 * data[4][0] * data[5][1] * data[6][1] * data[6][1] - 2 * data[4][1] * data[5][0] * data[6][1] * data[6][1] - 4 * data[4][1] * data[5][1] * data[6][0] * data[6][1] - data[0][0] * data[0][0] * data[6][1] - 2 * data[0][0] * data[0][1] * data[6][0] + data[0][1] * data[0][1] * data[6][1] - data[1][0] * data[1][0] * data[6][1] - 2 * data[1][0] * data[1][1] * data[6][0] + data[1][1] * data[1][1] * data[6][1] + data[2][0] * data[2][0] * data[6][1] + 2 * data[2][0] * data[2][1] * data[6][0] + data[3][0] * data[3][0] * data[6][1] + 2 * data[3][0] * data[3][1] * data[6][0] - data[4][0] * data[4][0] * data[6][1] - 2 * data[4][0] * data[4][1] * data[6][0] + data[4][1] * data[4][1] * data[6][1] + data[5][0] * data[5][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][0] - 2 * data[2][1] * data[0][0] - 2 * data[2][0] * data[0][1] - 2 * data[3][1] * data[1][0] - 2 * data[3][0] * data[1][1] - 2 * data[4][0] * data[5][1] - 2 * data[4][1] * data[5][0];
        data2[4][4] = 2 * data[2][0] * data[2][1] * (double) pow((double) data[6][1], (double) 3) + 3 * data[2][1] * data[2][1] * data[6][0] * data[6][1] * data[6][1] + 2 * data[3][0] * data[3][1] * (double) pow((double) data[6][1], (double) 3) + 3 * data[3][1] * data[3][1] * data[6][0] * data[6][1] * data[6][1] + 2 * data[5][0] * data[5][1] * (double) pow((double) data[6][1], (double) 3) + 3 * data[5][1] * data[5][1] * data[6][0] * data[6][1] * data[6][1] - 2 * data[0][1] * data[2][1] * data[6][1] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][1] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][1] * data[6][1] - 2 * data[0][0] * data[0][1] * data[6][1] - data[0][1] * data[0][1] * data[6][0] - 2 * data[1][0] * data[1][1] * data[6][1] - data[1][1] * data[1][1] * data[6][0] + 2 * data[2][0] * data[2][1] * data[6][1] + data[2][1] * data[2][1] * data[6][0] + 2 * data[3][0] * data[3][1] * data[6][1] + data[3][1] * data[3][1] * data[6][0] - 2 * data[4][0] * data[4][1] * data[6][1] - data[4][1] * data[4][1] * data[6][0] + 2 * data[5][0] * data[5][1] * data[6][1] + data[5][1] * data[5][1] * data[6][0] - 2 * data[0][1] * data[2][1] - 2 * data[1][1] * data[3][1] - 2 * data[4][1] * data[5][1];
        data2[4][5] = data[2][1] * data[2][1] * (double) pow((double) data[6][1], (double) 3) + data[3][1] * data[3][1] * (double) pow((double) data[6][1], (double) 3) + data[5][1] * data[5][1] * (double) pow((double) data[6][1], (double) 3) - data[0][1] * data[0][1] * data[6][1] - data[1][1] * data[1][1] * data[6][1] + data[2][1] * data[2][1] * data[6][1] + data[3][1] * data[3][1] * data[6][1] - data[4][1] * data[4][1] * data[6][1] + data[5][1] * data[5][1] * data[6][1];
        data2[4][6] = 3 * data[2][0] * data[2][0] * data[6][0] * data[6][0] * data[6][2] + 2 * data[2][0] * data[2][2] * (double) pow((double) data[6][0], (double) 3) + 3 * data[3][0] * data[3][0] * data[6][0] * data[6][0] * data[6][2] + 2 * data[3][0] * data[3][2] * (double) pow((double) data[6][0], (double) 3) + 3 * data[5][0] * data[5][0] * data[6][0] * data[6][0] * data[6][2] + 2 * data[5][0] * data[5][2] * (double) pow((double) data[6][0], (double) 3) - 4 * data[0][0] * data[2][0] * data[6][0] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][0] * data[6][0] - 2 * data[0][2] * data[2][0] * data[6][0] * data[6][0] - 4 * data[1][0] * data[3][0] * data[6][0] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][0] * data[6][0] - 2 * data[1][2] * data[3][0] * data[6][0] * data[6][0] - 4 * data[4][0] * data[5][0] * data[6][0] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][0] * data[6][0] - 2 * data[4][2] * data[5][0] * data[6][0] * data[6][0] + data[0][0] * data[0][0] * data[6][2] + 2 * data[0][0] * data[0][2] * data[6][0] + data[1][0] * data[1][0] * data[6][2] + 2 * data[1][0] * data[1][2] * data[6][0] + data[4][0] * data[4][0] * data[6][2] + 2 * data[4][0] * data[4][2] * data[6][0];
        data2[4][7] = 6 * data[2][0] * data[2][0] * data[6][0] * data[6][1] * data[6][2] + 6 * data[2][0] * data[2][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[2][0] * data[2][2] * data[6][0] * data[6][0] * data[6][1] + 2 * data[2][1] * data[2][2] * (double) pow((double) data[6][0], (double) 3) + 6 * data[3][0] * data[3][0] * data[6][0] * data[6][1] * data[6][2] + 6 * data[3][0] * data[3][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[3][0] * data[3][2] * data[6][0] * data[6][0] * data[6][1] + 2 * data[3][1] * data[3][2] * (double) pow((double) data[6][0], (double) 3) + 6 * data[5][0] * data[5][0] * data[6][0] * data[6][1] * data[6][2] + 6 * data[5][0] * data[5][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[5][0] * data[5][2] * data[6][0] * data[6][0] * data[6][1] + 2 * data[5][1] * data[5][2] * (double) pow((double) data[6][0], (double) 3) - 4 * data[0][0] * data[2][0] * data[6][1] * data[6][2] - 4 * data[0][0] * data[2][1] * data[6][0] * data[6][2] - 4 * data[0][0] * data[2][2] * data[6][0] * data[6][1] - 4 * data[0][1] * data[2][0] * data[6][0] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][0] * data[6][0] - 4 * data[0][2] * data[2][0] * data[6][0] * data[6][1] - 2 * data[0][2] * data[2][1] * data[6][0] * data[6][0] - 4 * data[1][0] * data[3][0] * data[6][1] * data[6][2] - 4 * data[1][0] * data[3][1] * data[6][0] * data[6][2] - 4 * data[1][0] * data[3][2] * data[6][0] * data[6][1] - 4 * data[1][1] * data[3][0] * data[6][0] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][0] * data[6][0] - 4 * data[1][2] * data[3][0] * data[6][0] * data[6][1] - 2 * data[1][2] * data[3][1] * data[6][0] * data[6][0] - 4 * data[4][0] * data[5][0] * data[6][1] * data[6][2] - 4 * data[4][0] * data[5][1] * data[6][0] * data[6][2] - 4 * data[4][0] * data[5][2] * data[6][0] * data[6][1] - 4 * data[4][1] * data[5][0] * data[6][0] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][0] * data[6][0] - 4 * data[4][2] * data[5][0] * data[6][0] * data[6][1] - 2 * data[4][2] * data[5][1] * data[6][0] * data[6][0] + 2 * data[0][0] * data[0][1] * data[6][2] + 2 * data[0][0] * data[0][2] * data[6][1] + 2 * data[0][1] * data[0][2] * data[6][0] + 2 * data[1][0] * data[1][1] * data[6][2] + 2 * data[1][0] * data[1][2] * data[6][1] + 2 * data[1][1] * data[1][2] * data[6][0] + 2 * data[4][0] * data[4][1] * data[6][2] + 2 * data[4][0] * data[4][2] * data[6][1] + 2 * data[4][0] * data[6][0] * data[6][0] + 2 * data[4][1] * data[4][2] * data[6][0] + 2 * data[4][0];
        data2[4][8] = 3 * data[2][0] * data[2][0] * data[6][1] * data[6][1] * data[6][2] + 12 * data[2][0] * data[2][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[2][0] * data[2][2] * data[6][0] * data[6][1] * data[6][1] + 3 * data[2][1] * data[2][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[2][1] * data[2][2] * data[6][0] * data[6][0] * data[6][1] + 3 * data[3][0] * data[3][0] * data[6][1] * data[6][1] * data[6][2] + 12 * data[3][0] * data[3][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[3][0] * data[3][2] * data[6][0] * data[6][1] * data[6][1] + 3 * data[3][1] * data[3][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[3][1] * data[3][2] * data[6][0] * data[6][0] * data[6][1] + 3 * data[5][0] * data[5][0] * data[6][1] * data[6][1] * data[6][2] + 12 * data[5][0] * data[5][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[5][0] * data[5][2] * data[6][0] * data[6][1] * data[6][1] + 3 * data[5][1] * data[5][1] * data[6][0] * data[6][0] * data[6][2] + 6 * data[5][1] * data[5][2] * data[6][0] * data[6][0] * data[6][1] - 4 * data[0][0] * data[2][1] * data[6][1] * data[6][2] - 2 * data[0][0] * data[2][2] * data[6][1] * data[6][1] - 4 * data[0][1] * data[2][0] * data[6][1] * data[6][2] - 4 * data[0][1] * data[2][1] * data[6][0] * data[6][2] - 4 * data[0][1] * data[2][2] * data[6][0] * data[6][1] - 2 * data[0][2] * data[2][0] * data[6][1] * data[6][1] - 4 * data[0][2] * data[2][1] * data[6][0] * data[6][1] - 4 * data[1][0] * data[3][1] * data[6][1] * data[6][2] - 2 * data[1][0] * data[3][2] * data[6][1] * data[6][1] - 4 * data[1][1] * data[3][0] * data[6][1] * data[6][2] - 4 * data[1][1] * data[3][1] * data[6][0] * data[6][2] - 4 * data[1][1] * data[3][2] * data[6][0] * data[6][1] - 2 * data[1][2] * data[3][0] * data[6][1] * data[6][1] - 4 * data[1][2] * data[3][1] * data[6][0] * data[6][1] - 4 * data[4][0] * data[5][1] * data[6][1] * data[6][2] - 2 * data[4][0] * data[5][2] * data[6][1] * data[6][1] - 4 * data[4][1] * data[5][0] * data[6][1] * data[6][2] - 4 * data[4][1] * data[5][1] * data[6][0] * data[6][2] - 4 * data[4][1] * data[5][2] * data[6][0] * data[6][1] - 2 * data[4][2] * data[5][0] * data[6][1] * data[6][1] - 4 * data[4][2] * data[5][1] * data[6][0] * data[6][1] - data[0][0] * data[0][0] * data[6][2] - 2 * data[0][0] * data[0][2] * data[6][0] + data[0][1] * data[0][1] * data[6][2] + 2 * data[0][1] * data[0][2] * data[6][1] - data[1][0] * data[1][0] * data[6][2] - 2 * data[1][0] * data[1][2] * data[6][0] + data[1][1] * data[1][1] * data[6][2] + 2 * data[1][1] * data[1][2] * data[6][1] + data[2][0] * data[2][0] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][0] + data[3][0] * data[3][0] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][0] - data[4][0] * data[4][0] * data[6][2] - 2 * data[4][0] * data[4][2] * data[6][0] + 4 * data[4][0] * data[6][0] * data[6][1] + data[4][1] * data[4][1] * data[6][2] + 2 * data[4][1] * data[4][2] * data[6][1] + 2 * data[4][1] * data[6][0] * data[6][0] + data[5][0] * data[5][0] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][0] - 2 * data[2][2] * data[0][0] - 2 * data[2][0] * data[0][2] - 2 * data[3][2] * data[1][0] - 2 * data[3][0] * data[1][2] - 2 * data[4][0] * data[5][2] - 2 * data[4][2] * data[5][0] + 2 * data[4][1];
        data2[4][9] = 6 * data[2][0] * data[2][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[2][0] * data[2][2] * (double) pow((double) data[6][1], (double) 3) + 6 * data[2][1] * data[2][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[2][1] * data[2][2] * data[6][0] * data[6][1] * data[6][1] + 6 * data[3][0] * data[3][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[3][0] * data[3][2] * (double) pow((double) data[6][1], (double) 3) + 6 * data[3][1] * data[3][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[3][1] * data[3][2] * data[6][0] * data[6][1] * data[6][1] + 6 * data[5][0] * data[5][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[5][0] * data[5][2] * (double) pow((double) data[6][1], (double) 3) + 6 * data[5][1] * data[5][1] * data[6][0] * data[6][1] * data[6][2] + 6 * data[5][1] * data[5][2] * data[6][0] * data[6][1] * data[6][1] - 4 * data[0][1] * data[2][1] * data[6][1] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][1] * data[6][1] - 2 * data[0][2] * data[2][1] * data[6][1] * data[6][1] - 4 * data[1][1] * data[3][1] * data[6][1] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][1] * data[6][1] - 2 * data[1][2] * data[3][1] * data[6][1] * data[6][1] - 4 * data[4][1] * data[5][1] * data[6][1] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][1] * data[6][1] - 2 * data[4][2] * data[5][1] * data[6][1] * data[6][1] - 2 * data[0][0] * data[0][1] * data[6][2] - 2 * data[0][0] * data[0][2] * data[6][1] - 2 * data[0][1] * data[0][2] * data[6][0] - 2 * data[1][0] * data[1][1] * data[6][2] - 2 * data[1][0] * data[1][2] * data[6][1] - 2 * data[1][1] * data[1][2] * data[6][0] + 2 * data[2][0] * data[2][1] * data[6][2] + 2 * data[2][0] * data[2][2] * data[6][1] + 2 * data[2][1] * data[2][2] * data[6][0] + 2 * data[3][0] * data[3][1] * data[6][2] + 2 * data[3][0] * data[3][2] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][0] - 2 * data[4][0] * data[4][1] * data[6][2] - 2 * data[4][0] * data[4][2] * data[6][1] + 2 * data[4][0] * data[6][1] * data[6][1] - 2 * data[4][1] * data[4][2] * data[6][0] + 4 * data[4][1] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][1] * data[6][2] + 2 * data[5][0] * data[5][2] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][0] - 2 * data[2][2] * data[0][1] - 2 * data[2][1] * data[0][2] - 2 * data[3][2] * data[1][1] - 2 * data[3][1] * data[1][2] - 2 * data[4][1] * data[5][2] - 2 * data[4][2] * data[5][1];
        data2[4][10] = 3 * data[2][1] * data[2][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[2][1] * data[2][2] * (double) pow((double) data[6][1], (double) 3) + 3 * data[3][1] * data[3][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[3][1] * data[3][2] * (double) pow((double) data[6][1], (double) 3) + 3 * data[5][1] * data[5][1] * data[6][1] * data[6][1] * data[6][2] + 2 * data[5][1] * data[5][2] * (double) pow((double) data[6][1], (double) 3) - data[0][1] * data[0][1] * data[6][2] - 2 * data[0][1] * data[0][2] * data[6][1] - data[1][1] * data[1][1] * data[6][2] - 2 * data[1][1] * data[1][2] * data[6][1] + data[2][1] * data[2][1] * data[6][2] + 2 * data[2][1] * data[2][2] * data[6][1] + data[3][1] * data[3][1] * data[6][2] + 2 * data[3][1] * data[3][2] * data[6][1] - data[4][1] * data[4][1] * data[6][2] - 2 * data[4][1] * data[4][2] * data[6][1] + 2 * data[4][1] * data[6][1] * data[6][1] + data[5][1] * data[5][1] * data[6][2] + 2 * data[5][1] * data[5][2] * data[6][1];
        data2[4][11] = 3 * data[2][0] * data[2][0] * data[6][0] * data[6][2] * data[6][2] + 6 * data[2][0] * data[2][2] * data[6][0] * data[6][0] * data[6][2] + data[2][2] * data[2][2] * (double) pow((double) data[6][0], (double) 3) + 3 * data[3][0] * data[3][0] * data[6][0] * data[6][2] * data[6][2] + 6 * data[3][0] * data[3][2] * data[6][0] * data[6][0] * data[6][2] + data[3][2] * data[3][2] * (double) pow((double) data[6][0], (double) 3) + 3 * data[5][0] * data[5][0] * data[6][0] * data[6][2] * data[6][2] + 6 * data[5][0] * data[5][2] * data[6][0] * data[6][0] * data[6][2] + data[5][2] * data[5][2] * (double) pow((double) data[6][0], (double) 3) - 2 * data[0][0] * data[2][0] * data[6][2] * data[6][2] - 4 * data[0][0] * data[2][2] * data[6][0] * data[6][2] - 4 * data[0][2] * data[2][0] * data[6][0] * data[6][2] - 2 * data[0][2] * data[2][2] * data[6][0] * data[6][0] - 2 * data[1][0] * data[3][0] * data[6][2] * data[6][2] - 4 * data[1][0] * data[3][2] * data[6][0] * data[6][2] - 4 * data[1][2] * data[3][0] * data[6][0] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][0] * data[6][0] - 2 * data[4][0] * data[5][0] * data[6][2] * data[6][2] - 4 * data[4][0] * data[5][2] * data[6][0] * data[6][2] - 4 * data[4][2] * data[5][0] * data[6][0] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][0] * data[6][0] + 2 * data[0][0] * data[0][2] * data[6][2] + data[0][2] * data[0][2] * data[6][0] + 2 * data[1][0] * data[1][2] * data[6][2] + data[1][2] * data[1][2] * data[6][0] + 2 * data[4][0] * data[4][2] * data[6][2] + data[4][2] * data[4][2] * data[6][0] - (double) pow((double) data[6][0], (double) 3) - data[6][0];
        data2[4][12] = 3 * data[2][0] * data[2][0] * data[6][1] * data[6][2] * data[6][2] + 6 * data[2][0] * data[2][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[2][0] * data[2][2] * data[6][0] * data[6][1] * data[6][2] + 6 * data[2][1] * data[2][2] * data[6][0] * data[6][0] * data[6][2] + 3 * data[2][2] * data[2][2] * data[6][0] * data[6][0] * data[6][1] + 3 * data[3][0] * data[3][0] * data[6][1] * data[6][2] * data[6][2] + 6 * data[3][0] * data[3][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[3][0] * data[3][2] * data[6][0] * data[6][1] * data[6][2] + 6 * data[3][1] * data[3][2] * data[6][0] * data[6][0] * data[6][2] + 3 * data[3][2] * data[3][2] * data[6][0] * data[6][0] * data[6][1] + 3 * data[5][0] * data[5][0] * data[6][1] * data[6][2] * data[6][2] + 6 * data[5][0] * data[5][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[5][0] * data[5][2] * data[6][0] * data[6][1] * data[6][2] + 6 * data[5][1] * data[5][2] * data[6][0] * data[6][0] * data[6][2] + 3 * data[5][2] * data[5][2] * data[6][0] * data[6][0] * data[6][1] - 2 * data[0][0] * data[2][1] * data[6][2] * data[6][2] - 4 * data[0][0] * data[2][2] * data[6][1] * data[6][2] - 2 * data[0][1] * data[2][0] * data[6][2] * data[6][2] - 4 * data[0][1] * data[2][2] * data[6][0] * data[6][2] - 4 * data[0][2] * data[2][0] * data[6][1] * data[6][2] - 4 * data[0][2] * data[2][1] * data[6][0] * data[6][2] - 4 * data[0][2] * data[2][2] * data[6][0] * data[6][1] - 2 * data[1][0] * data[3][1] * data[6][2] * data[6][2] - 4 * data[1][0] * data[3][2] * data[6][1] * data[6][2] - 2 * data[1][1] * data[3][0] * data[6][2] * data[6][2] - 4 * data[1][1] * data[3][2] * data[6][0] * data[6][2] - 4 * data[1][2] * data[3][0] * data[6][1] * data[6][2] - 4 * data[1][2] * data[3][1] * data[6][0] * data[6][2] - 4 * data[1][2] * data[3][2] * data[6][0] * data[6][1] - 2 * data[4][0] * data[5][1] * data[6][2] * data[6][2] - 4 * data[4][0] * data[5][2] * data[6][1] * data[6][2] - 2 * data[4][1] * data[5][0] * data[6][2] * data[6][2] - 4 * data[4][1] * data[5][2] * data[6][0] * data[6][2] - 4 * data[4][2] * data[5][0] * data[6][1] * data[6][2] - 4 * data[4][2] * data[5][1] * data[6][0] * data[6][2] - 4 * data[4][2] * data[5][2] * data[6][0] * data[6][1] + 2 * data[0][1] * data[0][2] * data[6][2] + data[0][2] * data[0][2] * data[6][1] + 2 * data[1][1] * data[1][2] * data[6][2] + data[1][2] * data[1][2] * data[6][1] + 4 * data[4][0] * data[6][0] * data[6][2] + 2 * data[4][1] * data[4][2] * data[6][2] + data[4][2] * data[4][2] * data[6][1] + 2 * data[4][2] * data[6][0] * data[6][0] - 3 * data[6][1] * data[6][0] * data[6][0] + 2 * data[4][2] - data[6][1];
        data2[4][13] = 6 * data[6][2] * data[6][2] * data[6][1] * data[2][0] * data[2][1] + 6 * data[2][0] * data[2][2] * data[6][1] * data[6][1] * data[6][2] + 3 * data[2][1] * data[2][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[2][1] * data[2][2] * data[6][0] * data[6][1] * data[6][2] + 3 * data[2][2] * data[2][2] * data[6][0] * data[6][1] * data[6][1] + 6 * data[6][2] * data[6][2] * data[6][1] * data[3][0] * data[3][1] + 6 * data[3][0] * data[3][2] * data[6][1] * data[6][1] * data[6][2] + 3 * data[3][1] * data[3][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[3][1] * data[3][2] * data[6][0] * data[6][1] * data[6][2] + 3 * data[3][2] * data[3][2] * data[6][0] * data[6][1] * data[6][1] + 6 * data[6][2] * data[6][2] * data[6][1] * data[5][0] * data[5][1] + 6 * data[5][0] * data[5][2] * data[6][1] * data[6][1] * data[6][2] + 3 * data[5][1] * data[5][1] * data[6][0] * data[6][2] * data[6][2] + 12 * data[5][1] * data[5][2] * data[6][0] * data[6][1] * data[6][2] + 3 * data[5][2] * data[5][2] * data[6][0] * data[6][1] * data[6][1] - 2 * data[0][1] * data[2][1] * data[6][2] * data[6][2] - 4 * data[6][2] * data[6][1] * data[2][2] * data[0][1] - 4 * data[6][2] * data[6][1] * data[2][1] * data[0][2] - 2 * data[0][2] * data[2][2] * data[6][1] * data[6][1] - 2 * data[1][1] * data[3][1] * data[6][2] * data[6][2] - 4 * data[6][2] * data[6][1] * data[3][2] * data[1][1] - 4 * data[6][2] * data[6][1] * data[3][1] * data[1][2] - 2 * data[1][2] * data[3][2] * data[6][1] * data[6][1] - 2 * data[4][1] * data[5][1] * data[6][2] * data[6][2] - 4 * data[6][2] * data[6][1] * data[4][1] * data[5][2] - 4 * data[6][2] * data[6][1] * data[4][2] * data[5][1] - 2 * data[4][2] * data[5][2] * data[6][1] * data[6][1] - 2 * data[0][0] * data[0][2] * data[6][2] - data[0][2] * data[0][2] * data[6][0] - 2 * data[1][0] * data[1][2] * data[6][2] - data[1][2] * data[1][2] * data[6][0] + 2 * data[2][0] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][0] + 2 * data[3][0] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][0] - 2 * data[4][0] * data[4][2] * data[6][2] + 4 * data[6][2] * data[6][1] * data[4][0] + 4 * data[4][1] * data[6][0] * data[6][2] - data[4][2] * data[4][2] * data[6][0] + 4 * data[4][2] * data[6][0] * data[6][1] + 2 * data[5][0] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][0] - 3 * data[6][0] * data[6][1] * data[6][1] - 2 * data[2][2] * data[0][2] - 2 * data[3][2] * data[1][2] - 2 * data[4][2] * data[5][2];
        data2[4][14] = 3 * data[2][1] * data[2][1] * data[6][1] * data[6][2] * data[6][2] + 6 * data[2][1] * data[2][2] * data[6][1] * data[6][1] * data[6][2] + data[2][2] * data[2][2] * (double) pow((double) data[6][1], (double) 3) + 3 * data[3][1] * data[3][1] * data[6][1] * data[6][2] * data[6][2] + 6 * data[3][1] * data[3][2] * data[6][1] * data[6][1] * data[6][2] + data[3][2] * data[3][2] * (double) pow((double) data[6][1], (double) 3) + 3 * data[5][1] * data[5][1] * data[6][1] * data[6][2] * data[6][2] + 6 * data[5][1] * data[5][2] * data[6][1] * data[6][1] * data[6][2] + data[5][2] * data[5][2] * (double) pow((double) data[6][1], (double) 3) - 2 * data[0][1] * data[0][2] * data[6][2] - data[0][2] * data[0][2] * data[6][1] - 2 * data[1][1] * data[1][2] * data[6][2] - data[1][2] * data[1][2] * data[6][1] + 2 * data[2][1] * data[2][2] * data[6][2] + data[2][2] * data[2][2] * data[6][1] + 2 * data[3][1] * data[3][2] * data[6][2] + data[3][2] * data[3][2] * data[6][1] - 2 * data[4][1] * data[4][2] * data[6][2] + 4 * data[4][1] * data[6][1] * data[6][2] - data[4][2] * data[4][2] * data[6][1] + 2 * data[4][2] * data[6][1] * data[6][1] + 2 * data[5][1] * data[5][2] * data[6][2] + data[5][2] * data[5][2] * data[6][1] - (double) pow((double) data[6][1], (double) 3);
        data2[4][15] = (double) pow((double) data[6][2], (double) 3) * data[2][0] * data[2][0] + 6 * data[6][0] * data[2][0] * data[2][2] * data[6][2] * data[6][2] + 3 * data[6][2] * data[2][2] * data[2][2] * data[6][0] * data[6][0] + (double) pow((double) data[6][2], (double) 3) * data[3][0] * data[3][0] + 6 * data[6][0] * data[3][0] * data[3][2] * data[6][2] * data[6][2] + 3 * data[6][2] * data[3][2] * data[3][2] * data[6][0] * data[6][0] + (double) pow((double) data[6][2], (double) 3) * data[5][0] * data[5][0] + 6 * data[6][0] * data[5][0] * data[5][2] * data[6][2] * data[6][2] + 3 * data[6][2] * data[5][2] * data[5][2] * data[6][0] * data[6][0] - 2 * data[6][2] * data[6][2] * data[2][2] * data[0][0] - 2 * data[6][2] * data[6][2] * data[2][0] * data[0][2] - 4 * data[6][2] * data[6][0] * data[2][2] * data[0][2] - 2 * data[6][2] * data[6][2] * data[3][2] * data[1][0] - 2 * data[6][2] * data[6][2] * data[3][0] * data[1][2] - 4 * data[6][2] * data[6][0] * data[3][2] * data[1][2] - 2 * data[6][2] * data[6][2] * data[4][0] * data[5][2] - 2 * data[6][2] * data[6][2] * data[4][2] * data[5][0] - 4 * data[6][2] * data[6][0] * data[4][2] * data[5][2] + data[6][2] * data[0][2] * data[0][2] + data[6][2] * data[1][2] * data[1][2] + data[6][2] * data[4][2] * data[4][2] - 3 * data[6][2] * data[6][0] * data[6][0] - data[6][2];
        data2[4][16] = 2 * data[2][0] * data[2][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[2][0] * data[2][2] * data[6][1] * data[6][2] * data[6][2] + 6 * data[2][1] * data[2][2] * data[6][0] * data[6][2] * data[6][2] + 6 * data[2][2] * data[2][2] * data[6][0] * data[6][1] * data[6][2] + 2 * data[3][0] * data[3][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[3][0] * data[3][2] * data[6][1] * data[6][2] * data[6][2] + 6 * data[3][1] * data[3][2] * data[6][0] * data[6][2] * data[6][2] + 6 * data[3][2] * data[3][2] * data[6][0] * data[6][1] * data[6][2] + 2 * data[5][0] * data[5][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[5][0] * data[5][2] * data[6][1] * data[6][2] * data[6][2] + 6 * data[5][1] * data[5][2] * data[6][0] * data[6][2] * data[6][2] + 6 * data[5][2] * data[5][2] * data[6][0] * data[6][1] * data[6][2] - 2 * data[0][1] * data[2][2] * data[6][2] * data[6][2] - 2 * data[0][2] * data[2][1] * data[6][2] * data[6][2] - 4 * data[0][2] * data[2][2] * data[6][1] * data[6][2] - 2 * data[1][1] * data[3][2] * data[6][2] * data[6][2] - 2 * data[1][2] * data[3][1] * data[6][2] * data[6][2] - 4 * data[1][2] * data[3][2] * data[6][1] * data[6][2] - 2 * data[4][1] * data[5][2] * data[6][2] * data[6][2] - 2 * data[4][2] * data[5][1] * data[6][2] * data[6][2] - 4 * data[4][2] * data[5][2] * data[6][1] * data[6][2] + 2 * data[4][0] * data[6][2] * data[6][2] + 4 * data[4][2] * data[6][0] * data[6][2] - 6 * data[6][0] * data[6][1] * data[6][2];
        data2[4][17] = data[2][1] * data[2][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[2][1] * data[2][2] * data[6][1] * data[6][2] * data[6][2] + 3 * data[2][2] * data[2][2] * data[6][1] * data[6][1] * data[6][2] + data[3][1] * data[3][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[3][1] * data[3][2] * data[6][1] * data[6][2] * data[6][2] + 3 * data[3][2] * data[3][2] * data[6][1] * data[6][1] * data[6][2] + data[5][1] * data[5][1] * (double) pow((double) data[6][2], (double) 3) + 6 * data[5][1] * data[5][2] * data[6][1] * data[6][2] * data[6][2] + 3 * data[5][2] * data[5][2] * data[6][1] * data[6][1] * data[6][2] - data[6][2] * data[0][2] * data[0][2] - data[6][2] * data[1][2] * data[1][2] + data[2][2] * data[2][2] * data[6][2] + data[3][2] * data[3][2] * data[6][2] + 2 * data[4][1] * data[6][2] * data[6][2] - data[6][2] * data[4][2] * data[4][2] + 4 * data[4][2] * data[6][1] * data[6][2] + data[5][2] * data[5][2] * data[6][2] - 3 * data[6][1] * data[6][1] * data[6][2];
        data2[4][18] = 2 * (double) pow((double) data[6][2], (double) 3) * data[2][0] * data[2][2] + 3 * data[6][2] * data[6][2] * data[2][2] * data[2][2] * data[6][0] + 2 * (double) pow((double) data[6][2], (double) 3) * data[3][0] * data[3][2] + 3 * data[6][2] * data[6][2] * data[3][2] * data[3][2] * data[6][0] + 2 * (double) pow((double) data[6][2], (double) 3) * data[5][0] * data[5][2] + 3 * data[6][2] * data[6][2] * data[5][2] * data[5][2] * data[6][0] - 2 * data[0][2] * data[2][2] * data[6][2] * data[6][2] - 2 * data[1][2] * data[3][2] * data[6][2] * data[6][2] - 2 * data[4][2] * data[5][2] * data[6][2] * data[6][2] - 3 * data[6][2] * data[6][2] * data[6][0];
        data2[4][19] = 2 * data[2][1] * data[2][2] * (double) pow((double) data[6][2], (double) 3) + 3 * data[2][2] * data[2][2] * data[6][1] * data[6][2] * data[6][2] + 2 * data[3][1] * data[3][2] * (double) pow((double) data[6][2], (double) 3) + 3 * data[3][2] * data[3][2] * data[6][1] * data[6][2] * data[6][2] + 2 * data[5][1] * data[5][2] * (double) pow((double) data[6][2], (double) 3) + 3 * data[5][2] * data[5][2] * data[6][1] * data[6][2] * data[6][2] + 2 * data[4][2] * data[6][2] * data[6][2] - 3 * data[6][1] * data[6][2] * data[6][2];
        data2[4][20] = data[2][2] * data[2][2] * (double) pow((double) data[6][2], (double) 3) + data[3][2] * data[3][2] * (double) pow((double) data[6][2], (double) 3) + data[5][2] * data[5][2] * (double) pow((double) data[6][2], (double) 3) - (double) pow((double) data[6][2], (double) 3);
        
        
        Eigen::Matrix<double, 5, 21> data2_eigen;
        
        for(int i=0;i<5;i++) {
            for(int j=0; j<21; j++) {
                data2_eigen(i,j) = data2[i][j];
            }
            
        }
        return data2_eigen;
        
    }

    inline Eigen::Matrix<double, 5, 21> get_coeffs_opt(const Eigen::Matrix<double, 3, 5>& q,
        const Eigen::Matrix<double, 3, 5>& p, const Eigen::Matrix<double, 3, 5>& c,
        Eigen::Matrix<double, 7, 3>& nullSpace)
    {
        Eigen::Matrix<double, 7, 7> A;
        Eigen::Matrix<double, 7, 3> b;

        A(0, 0) = 0;
        A(0, 1) = -p(2, 1) * q(0, 1);
        A(0, 2) = 0;
        A(0, 3) = -p(2, 1) * q(1, 1);
        A(0, 4) = p(1, 1) * q(0, 1);
        A(0, 5) = p(1, 1) * q(1, 1);
        A(0, 6) = c(0, 1) * q(0, 1);
        A(1, 0) = p(2, 1) * q(0, 1);
        A(1, 1) = 0;
        A(1, 2) = p(2, 1) * q(1, 1);
        A(1, 3) = 0;
        A(1, 4) = -p(0, 1) * q(0, 1);
        A(1, 5) = -p(0, 1) * q(1, 1);
        A(1, 6) = c(1, 1) * q(0, 1);
        A(2, 0) = 0;
        A(2, 1) = -p(2, 2) * q(0, 2);
        A(2, 2) = 0;
        A(2, 3) = -p(2, 2) * q(1, 2);
        A(2, 4) = p(1, 2) * q(0, 2);
        A(2, 5) = p(1, 2) * q(1, 2);
        A(2, 6) = c(0, 2) * q(0, 2);
        A(3, 0) = p(2, 2) * q(0, 2);
        A(3, 1) = 0;
        A(3, 2) = p(2, 2) * q(1, 2);
        A(3, 3) = 0;
        A(3, 4) = -p(0, 2) * q(0, 2);
        A(3, 5) = -p(0, 2) * q(1, 2);
        A(3, 6) = c(1, 2) * q(0, 2);
        A(4, 0) = 0;
        A(4, 1) = -p(2, 3) * q(0, 3);
        A(4, 2) = 0;
        A(4, 3) = -p(2, 3) * q(1, 3);
        A(4, 4) = p(1, 3) * q(0, 3);
        A(4, 5) = p(1, 3) * q(1, 3);
        A(4, 6) = c(0, 3) * q(0, 3);
        A(5, 0) = p(2, 3) * q(0, 3);
        A(5, 1) = 0;
        A(5, 2) = p(2, 3) * q(1, 3);
        A(5, 3) = 0;
        A(5, 4) = -p(0, 3) * q(0, 3);
        A(5, 5) = -p(0, 3) * q(1, 3);
        A(5, 6) = c(1, 3) * q(0, 3);
        A(6, 0) = 0;
        A(6, 1) = -p(2, 4) * q(0, 4);
        A(6, 2) = 0;
        A(6, 3) = -p(2, 4) * q(1, 4);
        A(6, 4) = p(1, 4) * q(0, 4);
        A(6, 5) = p(1, 4) * q(1, 4);
        A(6, 6) = c(0, 4) * q(0, 4);

        b(0, 0) = -c(0, 1) * q(1, 1);
        b(0, 1) = -c(0, 1) * q(2, 1);
        b(0, 2) = -p(1, 1) * q(2, 1);
        b(1, 0) = -c(1, 1) * q(1, 1);
        b(1, 1) = -c(1, 1) * q(2, 1);
        b(1, 2) = p(0, 1) * q(2, 1);
        b(2, 0) = -c(0, 2) * q(1, 2);
        b(2, 1) = -c(0, 2) * q(2, 2);
        b(2, 2) = -p(1, 2) * q(2, 2);
        b(3, 0) = -c(1, 2) * q(1, 2);
        b(3, 1) = -c(1, 2) * q(2, 2);
        b(3, 2) = p(0, 2) * q(2, 2);
        b(4, 0) = -c(0, 3) * q(1, 3);
        b(4, 1) = -c(0, 3) * q(2, 3);
        b(4, 2) = -p(1, 3) * q(2, 3);
        b(5, 0) = -c(1, 3) * q(1, 3);
        b(5, 1) = -c(1, 3) * q(2, 3);
        b(5, 2) = p(0, 3) * q(2, 3);
        b(6, 0) = -c(0, 4) * q(1, 4);
        b(6, 1) = -c(0, 4) * q(2, 4);
        b(6, 2) = -p(1, 4) * q(2, 4);


        nullSpace = A.lu().solve(b);
        Eigen::Matrix<double, 5, 21> data2;

        double NewVar0 = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1);
        double NewVar1 = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0);
        double NewVar51 = nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1);
        double NewVar2 = nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) + NewVar51;
        double NewVar3 = -nullSpace(5, 0);
        double NewVar4 = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 2) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 2);
        double NewVar5 = nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 2) + nullSpace(4, 1) - nullSpace(0, 0) * nullSpace(2, 2);
        double NewVar6 = 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0);
        double NewVar7 = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 2) + nullSpace(5, 0) * nullSpace(6, 0) + nullSpace(4, 0) - nullSpace(0, 1) * nullSpace(2, 2);
        double NewVar52 = 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 2) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 2) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 2);
        double NewVar8 = 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) + NewVar52;
        double NewVar9 = nullSpace(5, 1) * nullSpace(6, 0) + nullSpace(4, 1) - nullSpace(0, 0) * nullSpace(2, 2);
        double NewVar10 = 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0);
        double NewVar11 = 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1);
        double NewVar12 = nullSpace(5, 2) * nullSpace(6, 0) + nullSpace(4, 2) - nullSpace(6, 1);
        double NewVar13 = -nullSpace(5, 2);
        double NewVar53 = nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 2) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 2);
        double NewVar14 = nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 2) + NewVar53;
        double NewVar54 = nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0);
        double NewVar15 = nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) + NewVar54;
        double NewVar55 = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0);
        double NewVar16 = 2 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) + NewVar55;
        double NewVar17 = 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1);
        double NewVar18 = nullSpace(2, 0) * nullSpace(2, 0) + nullSpace(3, 0) * nullSpace(3, 0) + nullSpace(5, 0) * nullSpace(5, 0) - nullSpace(0, 0) * nullSpace(0, 0);
        double NewVar19 = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1);
        double NewVar20 = 2 * nullSpace(2, 0) * nullSpace(2, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 1);
        double NewVar56 = nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1);
        double NewVar21 = nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + NewVar56;
        double NewVar22 = nullSpace(3, 1) * nullSpace(3, 1) + nullSpace(5, 1) * nullSpace(5, 1) - nullSpace(0, 1) * nullSpace(0, 1);
        double NewVar57 = nullSpace(6, 0) * nullSpace(6, 0);
        double NewVar23 = nullSpace(5, 0) * NewVar57;
        double NewVar58 = nullSpace(4, 0) * nullSpace(6, 0);
        double NewVar24 = 2 * NewVar58;
        double NewVar59 = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0);
        double NewVar25 = 2 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) + NewVar59;
        double NewVar26 = 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1);
        double NewVar27 = 2 * nullSpace(3, 1) * nullSpace(3, 2) + 2 * nullSpace(4, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 2) - 2 * nullSpace(0, 1) * nullSpace(0, 2);
        double NewVar28 = 2 * nullSpace(4, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 0);
        double NewVar29 = 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0);
        double NewVar30 = nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(4, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 1) + 1 - 4 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2);
        double NewVar31 = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2);
        double NewVar60 = 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2);
        double NewVar32 = 2 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + NewVar28 + NewVar60 - 2 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1);
        double NewVar33 = 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2);
        double NewVar64 = 2 * nullSpace(4, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 1);
        double NewVar61 = NewVar64 - nullSpace(0, 2) * nullSpace(0, 2);
        double NewVar34 = nullSpace(2, 2) * nullSpace(2, 2) + nullSpace(3, 2) * nullSpace(3, 2) + nullSpace(5, 2) * nullSpace(5, 2) + NewVar61;
        double NewVar35 = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 2 * nullSpace(6, 0) * nullSpace(6, 2);
        double NewVar36 = 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(6, 1) * nullSpace(6, 2);
        double NewVar62 = nullSpace(6, 2) * nullSpace(6, 2);
        double NewVar37 = nullSpace(5, 2) * NewVar62;
        double NewVar63 = nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2);
        double NewVar38 = nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + NewVar63;
        double NewVar39 = (double)pow((double)nullSpace(6, 0), (double)3);
        double NewVar40 = nullSpace(4, 0) * NewVar57;
        double NewVar41 = (double)pow((double)nullSpace(6, 2), (double)3);
        double NewVar42 = nullSpace(0, 0) * nullSpace(0, 0) + nullSpace(1, 0) * nullSpace(1, 0) + nullSpace(4, 0) * nullSpace(4, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0);
        double NewVar43 = nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0);
        double NewVar44 = 2 * nullSpace(1, 0) * nullSpace(1, 1) + 2 * nullSpace(4, 0) * nullSpace(4, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1);
        double NewVar45 = nullSpace(0, 1) * nullSpace(0, 1) + nullSpace(1, 1) * nullSpace(1, 1) + nullSpace(4, 1) * nullSpace(4, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1);
        double NewVar46 = nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1);
        double NewVar47 = 2 * nullSpace(1, 0) * nullSpace(1, 2) + 2 * nullSpace(4, 0) * nullSpace(4, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 2);
        double NewVar48 = (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(3, 1) * nullSpace(3, 1) + (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 1) * nullSpace(5, 1) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 1);
        double NewVar49 = (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(3, 1) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(5, 1) * nullSpace(5, 2) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 1);
        double NewVar50 = (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(3, 1) * nullSpace(3, 1) + (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(5, 1) * nullSpace(5, 1) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 4 * nullSpace(4, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 3 * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2);

        data2(0, 0) = 0;
        data2(0, 1) = (double)(nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0)) + (double)(nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0)) + (double)(nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0)) - (double)(nullSpace(0, 0) * nullSpace(2, 0)) - (double)(nullSpace(1, 0) * nullSpace(3, 0)) - (double)(nullSpace(4, 0) * nullSpace(5, 0));
        data2(0, 2) = nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) + NewVar0 - nullSpace(0, 0) * nullSpace(2, 1) - nullSpace(0, 1) * nullSpace(2, 0) - nullSpace(1, 0) * nullSpace(3, 1) - nullSpace(1, 1) * nullSpace(3, 0) - nullSpace(4, 0) * nullSpace(5, 1) - nullSpace(4, 1) * nullSpace(5, 0);
        data2(0, 3) = NewVar1 - nullSpace(0, 0) * nullSpace(2, 0) - nullSpace(0, 1) * nullSpace(2, 1) - nullSpace(1, 0) * nullSpace(3, 0) - nullSpace(1, 1) * nullSpace(3, 1) - nullSpace(4, 0) * nullSpace(5, 0) - nullSpace(4, 1) * nullSpace(5, 1);
        data2(0, 4) = NewVar2 - nullSpace(0, 0) * nullSpace(2, 1) - nullSpace(0, 1) * nullSpace(2, 0) - nullSpace(1, 0) * nullSpace(3, 1) - nullSpace(1, 1) * nullSpace(3, 0) - nullSpace(4, 0) * nullSpace(5, 1) - nullSpace(4, 1) * nullSpace(5, 0);
        data2(0, 5) = -nullSpace(0, 1) * nullSpace(2, 1) - nullSpace(1, 1) * nullSpace(3, 1) - nullSpace(4, 1) * nullSpace(5, 1);
        data2(0, 6) = NewVar3 * nullSpace(6, 0) + nullSpace(4, 0);
        data2(0, 7) = 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) + NewVar4 + NewVar5 - nullSpace(0, 2) * nullSpace(2, 0) - nullSpace(1, 0) * nullSpace(3, 2) - nullSpace(1, 2) * nullSpace(3, 0) - nullSpace(4, 0) * nullSpace(5, 2) - nullSpace(4, 2) * nullSpace(5, 0) - nullSpace(5, 0) * nullSpace(6, 1) - nullSpace(5, 1) * nullSpace(6, 0);
        data2(0, 8) = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 2) + NewVar6 + NewVar7 - nullSpace(0, 2) * nullSpace(2, 1) - nullSpace(1, 1) * nullSpace(3, 2) - nullSpace(1, 2) * nullSpace(3, 1) - nullSpace(4, 1) * nullSpace(5, 2) - nullSpace(4, 2) * nullSpace(5, 1) - nullSpace(5, 1) * nullSpace(6, 1);
        data2(0, 9) = nullSpace(5, 0) * nullSpace(6, 1) + NewVar8 + NewVar9 - nullSpace(0, 2) * nullSpace(2, 0) - nullSpace(1, 0) * nullSpace(3, 2) - nullSpace(1, 2) * nullSpace(3, 0) - nullSpace(4, 0) * nullSpace(5, 2) - nullSpace(4, 2) * nullSpace(5, 0);
        data2(0, 10) = -nullSpace(2, 2) * nullSpace(0, 1) + nullSpace(5, 1) * nullSpace(6, 1) - nullSpace(0, 2) * nullSpace(2, 1) - nullSpace(1, 1) * nullSpace(3, 2) - nullSpace(1, 2) * nullSpace(3, 1) - nullSpace(4, 1) * nullSpace(5, 2) - nullSpace(4, 2) * nullSpace(5, 1);
        data2(0, 11) = -nullSpace(5, 0) * nullSpace(6, 2) + nullSpace(4, 2) - nullSpace(5, 2) * nullSpace(6, 0);
        data2(0, 12) = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 2) + NewVar10 - nullSpace(0, 2) * nullSpace(2, 2) - nullSpace(1, 2) * nullSpace(3, 2) - nullSpace(4, 2) * nullSpace(5, 2) - nullSpace(5, 1) * nullSpace(6, 2) - nullSpace(5, 2) * nullSpace(6, 1) - nullSpace(6, 0);
        data2(0, 13) = nullSpace(5, 0) * nullSpace(6, 2) + NewVar11 + NewVar12;
        data2(0, 14) = -nullSpace(2, 2) * nullSpace(0, 2) + nullSpace(5, 1) * nullSpace(6, 2) + nullSpace(5, 2) * nullSpace(6, 1) - nullSpace(1, 2) * nullSpace(3, 2) - nullSpace(4, 2) * nullSpace(5, 2);
        data2(0, 15) = NewVar13 * nullSpace(6, 2);
        data2(0, 16) = NewVar14 - nullSpace(6, 2);
        data2(0, 17) = nullSpace(5, 2) * nullSpace(6, 2);
        data2(0, 18) = 0;
        data2(0, 19) = 0;
        data2(0, 20) = 0;
        data2(1, 0) = 0;
        data2(1, 1) = NewVar15 - nullSpace(0, 0) * nullSpace(0, 0) - nullSpace(1, 0) * nullSpace(1, 0) - nullSpace(4, 0) * nullSpace(4, 0);
        data2(1, 2) = NewVar16 - 2 * nullSpace(0, 0) * nullSpace(0, 1) - 2 * nullSpace(1, 0) * nullSpace(1, 1) - 2 * nullSpace(4, 0) * nullSpace(4, 1);
        data2(1, 3) = nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + NewVar17 + NewVar18 - nullSpace(0, 1) * nullSpace(0, 1) - nullSpace(1, 0) * nullSpace(1, 0) - nullSpace(1, 1) * nullSpace(1, 1) - nullSpace(4, 0) * nullSpace(4, 0) - nullSpace(4, 1) * nullSpace(4, 1);
        data2(1, 4) = 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + NewVar19 + NewVar20 - 2 * nullSpace(1, 0) * nullSpace(1, 1) - 2 * nullSpace(4, 0) * nullSpace(4, 1);
        data2(1, 5) = nullSpace(2, 1) * nullSpace(2, 1) + NewVar21 + NewVar22 - nullSpace(1, 1) * nullSpace(1, 1) - nullSpace(4, 1) * nullSpace(4, 1);
        data2(1, 6) = -2 * NewVar23 + NewVar24;
        data2(1, 7) = 2 * nullSpace(4, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(6, 0) + NewVar25 - 2 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 2) - 2 * nullSpace(1, 0) * nullSpace(1, 2) - 2 * nullSpace(4, 0) * nullSpace(4, 2);
        data2(1, 8) = 2 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(0, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(6, 0) + 2 * nullSpace(4, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(1, 2) - 2 * nullSpace(4, 1) * nullSpace(4, 2) - 2 * nullSpace(5, 0);
        data2(1, 9) = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 2) - 2 * nullSpace(1, 0) * nullSpace(1, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(2, 0) * nullSpace(2, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) + 2 * nullSpace(4, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 2) - 2 * nullSpace(4, 0) * nullSpace(4, 2) - 2 * nullSpace(5, 1);
        data2(1, 10) = 2 * nullSpace(2, 1) * nullSpace(2, 2) + NewVar26 + NewVar27 - 2 * nullSpace(1, 1) * nullSpace(1, 2) - 2 * nullSpace(4, 1) * nullSpace(4, 2);
        data2(1, 11) = -4 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + NewVar28 - 2 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0);
        data2(1, 12) = 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + NewVar29 + NewVar30 - 4 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) - nullSpace(0, 2) * nullSpace(0, 2) - nullSpace(1, 2) * nullSpace(1, 2) - nullSpace(4, 2) * nullSpace(4, 2) - nullSpace(6, 0) * nullSpace(6, 0);
        data2(1, 13) = 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) + NewVar31 + NewVar32 - 4 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(5, 2);
        data2(1, 14) = nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + NewVar33 + NewVar34 - nullSpace(1, 2) * nullSpace(1, 2) - nullSpace(4, 2) * nullSpace(4, 2) - nullSpace(6, 1) * nullSpace(6, 1);
        data2(1, 15) = -2 * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 2) - 4 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2);
        data2(1, 16) = NewVar35 - 2 * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2);
        data2(1, 17) = 2 * nullSpace(4, 2) * nullSpace(6, 2) + NewVar36;
        data2(1, 18) = -2 * NewVar37;
        data2(1, 19) = NewVar38 - nullSpace(6, 2) * nullSpace(6, 2);
        data2(1, 20) = 0;
        data2(2, 0) = 0;
        data2(2, 1) = nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 0) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 0) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 0);
        data2(2, 2) = 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 1) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 1) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 1);
        data2(2, 3) = 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 1) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 0) * nullSpace(2, 0) + nullSpace(1, 0) * nullSpace(3, 0) + nullSpace(4, 0) * nullSpace(5, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 1) - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 0) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 0);
        data2(2, 4) = 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 1) + nullSpace(0, 1) * nullSpace(2, 0) + nullSpace(1, 0) * nullSpace(3, 1) + nullSpace(1, 1) * nullSpace(3, 0) + nullSpace(4, 0) * nullSpace(5, 1) + nullSpace(4, 1) * nullSpace(5, 0) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 1) - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 1) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 1);
        data2(2, 5) = nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(2, 1) + nullSpace(1, 1) * nullSpace(3, 1) + nullSpace(4, 1) * nullSpace(5, 1);
        data2(2, 6) = NewVar39 * NewVar3 + NewVar40;
        data2(2, 7) = 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 0) - (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(5, 1) - 3 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 2) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 2) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 2);
        data2(2, 8) = 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 3 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 3 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 1) + 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(4, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 0) - nullSpace(5, 0) * nullSpace(6, 0) - nullSpace(4, 0);
        data2(2, 9) = 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) - (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 0) - 3 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 1) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 1) - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 2) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 0) * nullSpace(2, 2) + nullSpace(0, 2) * nullSpace(2, 0) + nullSpace(1, 0) * nullSpace(3, 2) + nullSpace(1, 2) * nullSpace(3, 0) + nullSpace(4, 0) * nullSpace(5, 2) + nullSpace(4, 2) * nullSpace(5, 0) - nullSpace(5, 0) * nullSpace(6, 1) - nullSpace(5, 1) * nullSpace(6, 0) - nullSpace(4, 1);
        data2(2, 10) = 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(2, 2) + nullSpace(0, 2) * nullSpace(2, 1) + nullSpace(1, 1) * nullSpace(3, 2) + nullSpace(1, 2) * nullSpace(3, 1) + nullSpace(4, 1) * nullSpace(5, 2) + nullSpace(4, 2) * nullSpace(5, 1) - (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 1) - nullSpace(5, 1) * nullSpace(6, 1);
        data2(2, 11) = -3 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 0) - (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(5, 2);
        data2(2, 12) = 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 3 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 3 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 6 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 2) - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 2) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 0) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 0);
        data2(2, 13) = 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 3 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 6 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 2) - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 1) + 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 2) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 1) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 1) - nullSpace(5, 0) * nullSpace(6, 2) - nullSpace(5, 2) * nullSpace(6, 0) - nullSpace(4, 2);
        data2(2, 14) = 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 2) * nullSpace(2, 2) + nullSpace(1, 2) * nullSpace(3, 2) + nullSpace(4, 2) * nullSpace(5, 2) - (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 2) - 3 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) - nullSpace(5, 1) * nullSpace(6, 2) - nullSpace(5, 2) * nullSpace(6, 1);
        data2(2, 15) = -3 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(4, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2);
        data2(2, 16) = 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(6, 2) - 3 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 6 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 2) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 2) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 2);
        data2(2, 17) = 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) - nullSpace(5, 2) * nullSpace(6, 2);
        data2(2, 18) = (double)pow((double)nullSpace(6, 2), (double)3) * -nullSpace(5, 0) + nullSpace(4, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2);
        data2(2, 19) = nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) - (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(5, 1) - 3 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2);
        data2(2, 20) = NewVar41 * NewVar13;
        data2(3, 0) = nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) + NewVar42 + NewVar43 - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0);
        data2(3, 1) = 2 * nullSpace(0, 0) * nullSpace(0, 1) + NewVar16 + NewVar44 - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0);
        data2(3, 2) = 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 0) * nullSpace(0, 0) + nullSpace(0, 1) * nullSpace(0, 1) + nullSpace(1, 0) * nullSpace(1, 0) + nullSpace(1, 1) * nullSpace(1, 1) + nullSpace(4, 0) * nullSpace(4, 0) + nullSpace(4, 1) * nullSpace(4, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) - nullSpace(2, 0) * nullSpace(2, 0) - nullSpace(3, 0) * nullSpace(3, 0) - nullSpace(5, 0) * nullSpace(5, 0);
        data2(3, 3) = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 0) * nullSpace(0, 1) + 2 * nullSpace(1, 0) * nullSpace(1, 1) + 2 * nullSpace(4, 0) * nullSpace(4, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1) - 2 * nullSpace(2, 0) * nullSpace(2, 1) - 2 * nullSpace(3, 0) * nullSpace(3, 1) - 2 * nullSpace(5, 0) * nullSpace(5, 1);
        data2(3, 4) = nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) + NewVar45 + NewVar46 - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) - nullSpace(2, 1) * nullSpace(2, 1) - nullSpace(3, 1) * nullSpace(3, 1) - nullSpace(5, 1) * nullSpace(5, 1);
        data2(3, 5) = -2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1);
        data2(3, 6) = 2 * nullSpace(0, 0) * nullSpace(0, 2) + NewVar25 + NewVar47 - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0);
        data2(3, 7) = 2 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(0, 1) * nullSpace(0, 2) + 2 * nullSpace(1, 1) * nullSpace(1, 2) + 2 * nullSpace(4, 1) * nullSpace(4, 2) + 2 * nullSpace(5, 0) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0);
        data2(3, 8) = 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 4 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) + 2 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) + 4 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 0) * nullSpace(0, 2) + 2 * nullSpace(1, 0) * nullSpace(1, 2) + 2 * nullSpace(4, 0) * nullSpace(4, 2) + 2 * nullSpace(5, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1) - 2 * nullSpace(2, 0) * nullSpace(2, 2) - 2 * nullSpace(3, 0) * nullSpace(3, 2) - 2 * nullSpace(5, 0) * nullSpace(5, 2);
        data2(3, 9) = 2 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 4 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 1) * nullSpace(0, 2) + 2 * nullSpace(1, 1) * nullSpace(1, 2) + 2 * nullSpace(4, 1) * nullSpace(4, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) - 2 * nullSpace(2, 1) * nullSpace(2, 2) - 2 * nullSpace(3, 1) * nullSpace(3, 2) - 2 * nullSpace(5, 1) * nullSpace(5, 2);
        data2(3, 10) = -2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1);
        data2(3, 11) = 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) + 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + nullSpace(0, 2) * nullSpace(0, 2) + nullSpace(1, 2) * nullSpace(1, 2) + nullSpace(4, 2) * nullSpace(4, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) - nullSpace(6, 0) * nullSpace(6, 0) - 1;
        data2(3, 12) = 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 4 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 4 * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(5, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1) - 2 * nullSpace(6, 0) * nullSpace(6, 1);
        data2(3, 13) = 4 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 2) + 4 * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 2) * nullSpace(0, 2) + nullSpace(1, 2) * nullSpace(1, 2) + nullSpace(4, 2) * nullSpace(4, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) - nullSpace(2, 2) * nullSpace(2, 2) - nullSpace(3, 2) * nullSpace(3, 2) - nullSpace(5, 2) * nullSpace(5, 2) - nullSpace(6, 1) * nullSpace(6, 1);
        data2(3, 14) = -2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 4 * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1);
        data2(3, 15) = NewVar35 - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 2);
        data2(3, 16) = 2 * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 4 * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) + NewVar36;
        data2(3, 17) = -2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 4 * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 2);
        data2(3, 18) = NewVar38 - nullSpace(6, 2) * nullSpace(6, 2);
        data2(3, 19) = 2 * NewVar37;
        data2(3, 20) = 0;
        data2(4, 0) = (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(2, 0) * nullSpace(2, 0) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(3, 0) * nullSpace(3, 0) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(5, 0) * nullSpace(5, 0) + nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 0) + nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 0) + nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0);
        data2(4, 1) = (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 1) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 1) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 1) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 0) + 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 0) + nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 1) + nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 1) + nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1);
        data2(4, 2) = (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(2, 1) * nullSpace(2, 1) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(3, 1) * nullSpace(3, 1) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(5, 1) * nullSpace(5, 1) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 0) + nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 0) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) + nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 0) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 0) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 0) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 0);
        data2(4, 3) = (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(2, 0) * nullSpace(2, 0) + (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(3, 0) * nullSpace(3, 0) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) + (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 0) * nullSpace(5, 0) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 1) + nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 1) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 1) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 1) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 1) + 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 1) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 0);
        data2(4, 4) = (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 1) + (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 1) + (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 1) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 1) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 0) + 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) + nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) + nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) + nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 1) - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 0) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 0);
        data2(4, 5) = (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(2, 1) * nullSpace(2, 1) + NewVar2 + NewVar48 - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 1) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 1);
        data2(4, 6) = (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 2) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 0) + 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 0) + nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 2) + nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 2) + nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2);
        data2(4, 7) = (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(2, 1) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(3, 1) * nullSpace(3, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 1) + (double)pow((double)nullSpace(6, 0), (double)3) * 2 * nullSpace(5, 1) * nullSpace(5, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 1) + 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 0) + 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 1) + 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 1) + 2 * nullSpace(4, 0) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 0) + 2 * nullSpace(4, 0) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 1);
        data2(4, 8) = 12 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 12 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 12 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 1) + 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 1) + 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) + nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 2) + nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 2) + nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 0) - nullSpace(0, 0) * nullSpace(0, 0) * nullSpace(6, 2) - nullSpace(1, 0) * nullSpace(1, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 1) + 2 * nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 0) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) + 4 * nullSpace(4, 0) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 2) + nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 2) + 2 * nullSpace(4, 1) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 0) * nullSpace(2, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 0) - nullSpace(4, 0) * nullSpace(4, 0) * nullSpace(6, 2);
        data2(4, 9) = (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) + (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 0) * nullSpace(0, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 1) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(1, 1) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 1) * nullSpace(6, 2) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) + 2 * nullSpace(4, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) + 4 * nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 1) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 0) - 2 * nullSpace(0, 1) * nullSpace(2, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 1) - 2 * nullSpace(4, 1) * nullSpace(5, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 1);
        data2(4, 10) = (double)pow((double)nullSpace(6, 1), (double)3) * 2 * nullSpace(2, 1) * nullSpace(2, 2) + NewVar8 + NewVar49 - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 1) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 1) - nullSpace(0, 1) * nullSpace(0, 1) * nullSpace(6, 2) - nullSpace(1, 1) * nullSpace(1, 1) * nullSpace(6, 2) - nullSpace(4, 1) * nullSpace(4, 1) * nullSpace(6, 2);
        data2(4, 11) = (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(2, 2) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(3, 2) * nullSpace(3, 2) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(1, 0) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 0) * nullSpace(6, 2) + (double)pow((double)nullSpace(6, 0), (double)3) * nullSpace(5, 2) * nullSpace(5, 2) + 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 2) + 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 0) + nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 0) + nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 0) - (double)pow((double)nullSpace(6, 0), (double)3) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) - 4 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 0) * nullSpace(6, 2) - nullSpace(6, 0);
        data2(4, 12) = 12 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 12 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(2, 0) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 3 * nullSpace(3, 0) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) + 12 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 3 * nullSpace(5, 0) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 4 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 0) + 4 * nullSpace(4, 0) * nullSpace(6, 0) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 1) + nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 1) + nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 1) + 2 * nullSpace(4, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) - 3 * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 1) - nullSpace(6, 1);
        data2(4, 13) = 12 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(1, 1) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 12 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 12 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) + 6 * nullSpace(5, 0) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) - 4 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(0, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(1, 2) * nullSpace(6, 2) - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 0) + 2 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 2) + 2 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 2) + 4 * nullSpace(4, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 4 * nullSpace(4, 1) * nullSpace(6, 0) * nullSpace(6, 2) + 4 * nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 1) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) - 2 * nullSpace(4, 0) * nullSpace(4, 2) * nullSpace(6, 2) - 3 * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 1) - 2 * nullSpace(0, 2) * nullSpace(2, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 0) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 0);
        data2(4, 14) = (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(2, 2) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(3, 2) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 1), (double)3) * nullSpace(5, 2) * nullSpace(5, 2) + 3 * nullSpace(2, 1) * nullSpace(2, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(3, 1) * nullSpace(3, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 1) * nullSpace(5, 1) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 1) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(0, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(1, 2) * nullSpace(6, 2) - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 1) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 1) + 2 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 2) + 2 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 1) * nullSpace(6, 1) + 2 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 2) + 4 * nullSpace(4, 1) * nullSpace(6, 1) * nullSpace(6, 2) + nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) + nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) + nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) - (double)pow((double)nullSpace(6, 1), (double)3) - 2 * nullSpace(4, 1) * nullSpace(4, 2) * nullSpace(6, 2) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 1);
        data2(4, 15) = (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(2, 0) * nullSpace(2, 0) + (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(3, 0) * nullSpace(3, 0) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 0) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 0) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(5, 0) * nullSpace(5, 0) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 2) + nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 2) + nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 0) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 3 * nullSpace(6, 0) * nullSpace(6, 0) * nullSpace(6, 2) - nullSpace(6, 2);
        data2(4, 16) = (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 1) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 1) + 6 * nullSpace(2, 0) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 1) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(3, 0) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(3, 1) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 1) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 1) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 1) + 6 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 6 * nullSpace(5, 0) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(5, 1) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 6 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2) + 2 * nullSpace(4, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 4 * nullSpace(4, 2) * nullSpace(6, 0) * nullSpace(6, 2) - 2 * nullSpace(4, 1) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 1) * nullSpace(6, 2) * nullSpace(6, 2) - 4 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 4 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) - 6 * nullSpace(6, 0) * nullSpace(6, 1) * nullSpace(6, 2);
        data2(4, 17) = (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(2, 1) * nullSpace(2, 1) + NewVar14 + NewVar50 - nullSpace(0, 2) * nullSpace(0, 2) * nullSpace(6, 2) - nullSpace(1, 2) * nullSpace(1, 2) * nullSpace(6, 2) - nullSpace(4, 2) * nullSpace(4, 2) * nullSpace(6, 2);
        data2(4, 18) = (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(2, 0) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(3, 0) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(5, 0) * nullSpace(5, 2) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(0, 2) * nullSpace(2, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(1, 2) * nullSpace(3, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 2 * nullSpace(4, 2) * nullSpace(5, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(6, 0) * nullSpace(6, 2) * nullSpace(6, 2);
        data2(4, 19) = (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(2, 1) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(3, 1) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * 2 * nullSpace(5, 1) * nullSpace(5, 2) + 3 * nullSpace(2, 2) * nullSpace(2, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(3, 2) * nullSpace(3, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 3 * nullSpace(5, 2) * nullSpace(5, 2) * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2) + 2 * nullSpace(4, 2) * nullSpace(6, 2) * nullSpace(6, 2) - 3 * nullSpace(6, 1) * nullSpace(6, 2) * nullSpace(6, 2);
        data2(4, 20) = (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(2, 2) * nullSpace(2, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(3, 2) * nullSpace(3, 2) + (double)pow((double)nullSpace(6, 2), (double)3) * nullSpace(5, 2) * nullSpace(5, 2) - (double)pow((double)nullSpace(6, 2), (double)3);

        return data2;

    }
}